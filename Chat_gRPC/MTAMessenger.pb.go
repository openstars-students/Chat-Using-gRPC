// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MTAMessenger.proto

/*
Package MTAMessenger is a generated protocol buffer package.

It is generated from these files:
	MTAMessenger.proto

It has these top-level messages:
	Request
	Reply
	Empty
	UserLogin
	User
	UserInfo
	Response
	Message
	Conversation
	AllConversation
	WaittingMessage
	AllMessages
	AllInfoUser
	ConversationDetail
*/
package MTAMessenger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Sessionkey string `protobuf:"bytes,2,opt,name=sessionkey" json:"sessionkey,omitempty"`
	Request    string `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Id         string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetSessionkey() string {
	if m != nil {
		return m.Sessionkey
	}
	return ""
}

func (m *Request) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Reply struct {
	Rep string `protobuf:"bytes,1,opt,name=rep" json:"rep,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reply) GetRep() string {
	if m != nil {
		return m.Rep
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// login
type UserLogin struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *UserLogin) Reset()                    { *m = UserLogin{} }
func (m *UserLogin) String() string            { return proto.CompactTextString(m) }
func (*UserLogin) ProtoMessage()               {}
func (*UserLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserLogin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type User struct {
	Uid         uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Phone       string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Email       string `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	CreatedTime string `protobuf:"bytes,6,opt,name=createdTime" json:"createdTime,omitempty"`
	Avatar      []byte `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Active      bool   `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	Password    string `protobuf:"bytes,8,opt,name=password" json:"password,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *User) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *User) GetAvatar() []byte {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *User) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserInfo struct {
	Sessionkey string `protobuf:"bytes,1,opt,name=sessionkey" json:"sessionkey,omitempty"`
	Infouser   *User  `protobuf:"bytes,2,opt,name=infouser" json:"infouser,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserInfo) GetSessionkey() string {
	if m != nil {
		return m.Sessionkey
	}
	return ""
}

func (m *UserInfo) GetInfouser() *User {
	if m != nil {
		return m.Infouser
	}
	return nil
}

//
type Response struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Check    bool   `protobuf:"varint,2,opt,name=check" json:"check,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Response) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *Response) GetCheck() bool {
	if m != nil {
		return m.Check
	}
	return false
}

type Message struct {
	Mid         uint64 `protobuf:"varint,1,opt,name=mid" json:"mid,omitempty"`
	Sessionkey  string `protobuf:"bytes,2,opt,name=sessionkey" json:"sessionkey,omitempty"`
	Content     string `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	CreatedTime string `protobuf:"bytes,4,opt,name=createdTime" json:"createdTime,omitempty"`
	FromName    string `protobuf:"bytes,7,opt,name=from_name,json=fromName" json:"from_name,omitempty"`
	Image       []byte `protobuf:"bytes,9,opt,name=Image,proto3" json:"Image,omitempty"`
	Cid         string `protobuf:"bytes,3,opt,name=cid" json:"cid,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Message) GetMid() uint64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Message) GetSessionkey() string {
	if m != nil {
		return m.Sessionkey
	}
	return ""
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *Message) GetFromName() string {
	if m != nil {
		return m.FromName
	}
	return ""
}

func (m *Message) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Message) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

// tra ve cho client khi client chua co
type Conversation struct {
	Cid              string `protobuf:"bytes,1,opt,name=cid" json:"cid,omitempty"`
	ConversationName string `protobuf:"bytes,2,opt,name=ConversationName" json:"ConversationName,omitempty"`
	LastedTime       string `protobuf:"bytes,4,opt,name=LastedTime" json:"LastedTime,omitempty"`
	Listusername     string `protobuf:"bytes,5,opt,name=listusername" json:"listusername,omitempty"`
	LastMessage      string `protobuf:"bytes,3,opt,name=lastMessage" json:"lastMessage,omitempty"`
	LastMid          string `protobuf:"bytes,6,opt,name=lastMid" json:"lastMid,omitempty"`
}

func (m *Conversation) Reset()                    { *m = Conversation{} }
func (m *Conversation) String() string            { return proto.CompactTextString(m) }
func (*Conversation) ProtoMessage()               {}
func (*Conversation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Conversation) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Conversation) GetConversationName() string {
	if m != nil {
		return m.ConversationName
	}
	return ""
}

func (m *Conversation) GetLastedTime() string {
	if m != nil {
		return m.LastedTime
	}
	return ""
}

func (m *Conversation) GetListusername() string {
	if m != nil {
		return m.Listusername
	}
	return ""
}

func (m *Conversation) GetLastMessage() string {
	if m != nil {
		return m.LastMessage
	}
	return ""
}

func (m *Conversation) GetLastMid() string {
	if m != nil {
		return m.LastMid
	}
	return ""
}

type AllConversation struct {
	ListConversation []*Conversation `protobuf:"bytes,1,rep,name=listConversation" json:"listConversation,omitempty"`
}

func (m *AllConversation) Reset()                    { *m = AllConversation{} }
func (m *AllConversation) String() string            { return proto.CompactTextString(m) }
func (*AllConversation) ProtoMessage()               {}
func (*AllConversation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AllConversation) GetListConversation() []*Conversation {
	if m != nil {
		return m.ListConversation
	}
	return nil
}

// tin nhan chua duoc nhan
type WaittingMessage struct {
	Waittingmess []*Message `protobuf:"bytes,1,rep,name=waittingmess" json:"waittingmess,omitempty"`
}

func (m *WaittingMessage) Reset()                    { *m = WaittingMessage{} }
func (m *WaittingMessage) String() string            { return proto.CompactTextString(m) }
func (*WaittingMessage) ProtoMessage()               {}
func (*WaittingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *WaittingMessage) GetWaittingmess() []*Message {
	if m != nil {
		return m.Waittingmess
	}
	return nil
}

// tat ca tin nhan
type AllMessages struct {
	Allmess []*Message `protobuf:"bytes,1,rep,name=allmess" json:"allmess,omitempty"`
}

func (m *AllMessages) Reset()                    { *m = AllMessages{} }
func (m *AllMessages) String() string            { return proto.CompactTextString(m) }
func (*AllMessages) ProtoMessage()               {}
func (*AllMessages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AllMessages) GetAllmess() []*Message {
	if m != nil {
		return m.Allmess
	}
	return nil
}

// tra ve tat ca User theo dieu kien
type AllInfoUser struct {
	Alluser []*User `protobuf:"bytes,1,rep,name=alluser" json:"alluser,omitempty"`
}

func (m *AllInfoUser) Reset()                    { *m = AllInfoUser{} }
func (m *AllInfoUser) String() string            { return proto.CompactTextString(m) }
func (*AllInfoUser) ProtoMessage()               {}
func (*AllInfoUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AllInfoUser) GetAlluser() []*User {
	if m != nil {
		return m.Alluser
	}
	return nil
}

type ConversationDetail struct {
	Sessionkey string   `protobuf:"bytes,3,opt,name=sessionkey" json:"sessionkey,omitempty"`
	Cid        string   `protobuf:"bytes,1,opt,name=cid" json:"cid,omitempty"`
	Uid        []string `protobuf:"bytes,2,rep,name=uid" json:"uid,omitempty"`
}

func (m *ConversationDetail) Reset()                    { *m = ConversationDetail{} }
func (m *ConversationDetail) String() string            { return proto.CompactTextString(m) }
func (*ConversationDetail) ProtoMessage()               {}
func (*ConversationDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ConversationDetail) GetSessionkey() string {
	if m != nil {
		return m.Sessionkey
	}
	return ""
}

func (m *ConversationDetail) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *ConversationDetail) GetUid() []string {
	if m != nil {
		return m.Uid
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "MTAMessenger.Request")
	proto.RegisterType((*Reply)(nil), "MTAMessenger.Reply")
	proto.RegisterType((*Empty)(nil), "MTAMessenger.Empty")
	proto.RegisterType((*UserLogin)(nil), "MTAMessenger.UserLogin")
	proto.RegisterType((*User)(nil), "MTAMessenger.User")
	proto.RegisterType((*UserInfo)(nil), "MTAMessenger.UserInfo")
	proto.RegisterType((*Response)(nil), "MTAMessenger.Response")
	proto.RegisterType((*Message)(nil), "MTAMessenger.Message")
	proto.RegisterType((*Conversation)(nil), "MTAMessenger.Conversation")
	proto.RegisterType((*AllConversation)(nil), "MTAMessenger.AllConversation")
	proto.RegisterType((*WaittingMessage)(nil), "MTAMessenger.WaittingMessage")
	proto.RegisterType((*AllMessages)(nil), "MTAMessenger.AllMessages")
	proto.RegisterType((*AllInfoUser)(nil), "MTAMessenger.AllInfoUser")
	proto.RegisterType((*ConversationDetail)(nil), "MTAMessenger.ConversationDetail")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatgRPC service

type ChatgRPCClient interface {
	// rpc LoadMess(Request) returns(WaittingMessage){}
	// dieu huong chat
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (ChatgRPC_RouteChatClient, error)
	// dang ki thanh vien
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	// dang nhap
	Login(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*Response, error)
	// logout
	Logout(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// kiem tra co user tren database hay ko, truyen vao la 1 sessionkey
	CheckUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// return uid
	GetId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// tra ve cid
	CreateConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// dau vao la uid tra ve danh sach id Conversation
	GetAllConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllConversation, error)
	// add n uid to conversation
	AddUidToConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// load tat ca tin nhan
	LoadMessOnCid(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllMessages, error)
	// ket ban
	AddFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// lay danh sach tat ca user
	GetListUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllInfoUser, error)
	// lay danh sach ban be
	GetListFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllInfoUser, error)
	// lay thong tin 1 user
	GetInfoUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*User, error)
	DeleteMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DeleteConversasion(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UpdateInfo(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error)
}

type chatgRPCClient struct {
	cc *grpc.ClientConn
}

func NewChatgRPCClient(cc *grpc.ClientConn) ChatgRPCClient {
	return &chatgRPCClient{cc}
}

func (c *chatgRPCClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (ChatgRPC_RouteChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatgRPC_serviceDesc.Streams[0], c.cc, "/MTAMessenger.ChatgRPC/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatgRPCRouteChatClient{stream}
	return x, nil
}

type ChatgRPC_RouteChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatgRPCRouteChatClient struct {
	grpc.ClientStream
}

func (x *chatgRPCRouteChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatgRPCRouteChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatgRPCClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) Login(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) Logout(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) CheckUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/CheckUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/GetId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) CreateConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/CreateConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetAllConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllConversation, error) {
	out := new(AllConversation)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/GetAllConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) AddUidToConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/AddUidToConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) LoadMessOnCid(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllMessages, error) {
	out := new(AllMessages)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/LoadMessOnCid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) AddFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/AddFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetListUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllInfoUser, error) {
	out := new(AllInfoUser)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/GetListUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetListFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllInfoUser, error) {
	out := new(AllInfoUser)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/GetListFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetInfoUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/GetInfoUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) DeleteMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/DeleteMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) DeleteConversasion(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/DeleteConversasion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) UpdateInfo(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/MTAMessenger.ChatgRPC/UpdateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatgRPC service

type ChatgRPCServer interface {
	// rpc LoadMess(Request) returns(WaittingMessage){}
	// dieu huong chat
	RouteChat(ChatgRPC_RouteChatServer) error
	// dang ki thanh vien
	Register(context.Context, *User) (*Response, error)
	// dang nhap
	Login(context.Context, *UserLogin) (*Response, error)
	// logout
	Logout(context.Context, *Request) (*Response, error)
	// kiem tra co user tren database hay ko, truyen vao la 1 sessionkey
	CheckUser(context.Context, *Request) (*Response, error)
	// return uid
	GetId(context.Context, *Request) (*Response, error)
	// tra ve cid
	CreateConversation(context.Context, *Request) (*Response, error)
	// dau vao la uid tra ve danh sach id Conversation
	GetAllConversation(context.Context, *Request) (*AllConversation, error)
	// add n uid to conversation
	AddUidToConversation(context.Context, *Request) (*Response, error)
	// load tat ca tin nhan
	LoadMessOnCid(context.Context, *Request) (*AllMessages, error)
	// ket ban
	AddFriend(context.Context, *Request) (*Response, error)
	// lay danh sach tat ca user
	GetListUser(context.Context, *Request) (*AllInfoUser, error)
	// lay danh sach ban be
	GetListFriend(context.Context, *Request) (*AllInfoUser, error)
	// lay thong tin 1 user
	GetInfoUser(context.Context, *Request) (*User, error)
	DeleteMessage(context.Context, *Request) (*Response, error)
	DeleteConversasion(context.Context, *Request) (*Response, error)
	UpdateInfo(context.Context, *UserInfo) (*Response, error)
}

func RegisterChatgRPCServer(s *grpc.Server, srv ChatgRPCServer) {
	s.RegisterService(&_ChatgRPC_serviceDesc, srv)
}

func _ChatgRPC_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatgRPCServer).RouteChat(&chatgRPCRouteChatServer{stream})
}

type ChatgRPC_RouteChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatgRPCRouteChatServer struct {
	grpc.ServerStream
}

func (x *chatgRPCRouteChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatgRPCRouteChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatgRPC_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).Login(ctx, req.(*UserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).Logout(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/CheckUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).CheckUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetId(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).CreateConversation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetAllConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetAllConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/GetAllConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetAllConversation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_AddUidToConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).AddUidToConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/AddUidToConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).AddUidToConversation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_LoadMessOnCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).LoadMessOnCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/LoadMessOnCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).LoadMessOnCid(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).AddFriend(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/GetListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetListUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetListFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetListFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/GetListFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetListFriend(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetInfoUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetInfoUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/GetInfoUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetInfoUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).DeleteMessage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_DeleteConversasion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).DeleteConversasion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/DeleteConversasion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).DeleteConversasion(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MTAMessenger.ChatgRPC/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).UpdateInfo(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatgRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MTAMessenger.ChatgRPC",
	HandlerType: (*ChatgRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ChatgRPC_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ChatgRPC_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ChatgRPC_Logout_Handler,
		},
		{
			MethodName: "CheckUser",
			Handler:    _ChatgRPC_CheckUser_Handler,
		},
		{
			MethodName: "GetId",
			Handler:    _ChatgRPC_GetId_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _ChatgRPC_CreateConversation_Handler,
		},
		{
			MethodName: "GetAllConversation",
			Handler:    _ChatgRPC_GetAllConversation_Handler,
		},
		{
			MethodName: "AddUidToConversation",
			Handler:    _ChatgRPC_AddUidToConversation_Handler,
		},
		{
			MethodName: "LoadMessOnCid",
			Handler:    _ChatgRPC_LoadMessOnCid_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _ChatgRPC_AddFriend_Handler,
		},
		{
			MethodName: "GetListUser",
			Handler:    _ChatgRPC_GetListUser_Handler,
		},
		{
			MethodName: "GetListFriend",
			Handler:    _ChatgRPC_GetListFriend_Handler,
		},
		{
			MethodName: "GetInfoUser",
			Handler:    _ChatgRPC_GetInfoUser_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatgRPC_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteConversasion",
			Handler:    _ChatgRPC_DeleteConversasion_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _ChatgRPC_UpdateInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteChat",
			Handler:       _ChatgRPC_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "MTAMessenger.proto",
}

func init() { proto.RegisterFile("MTAMessenger.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x8e, 0xec, 0x38, 0x96, 0x8f, 0xdd, 0x35, 0x20, 0xda, 0x4c, 0xf5, 0xb0, 0xc1, 0xe0, 0x6e,
	0x8c, 0x61, 0xf0, 0x86, 0xec, 0xa6, 0xed, 0x8a, 0x6e, 0xae, 0xda, 0x1a, 0x01, 0xdc, 0x2e, 0xd0,
	0x12, 0xec, 0xe7, 0x66, 0xe0, 0xac, 0x13, 0x85, 0xa8, 0x24, 0x6a, 0x22, 0x9d, 0x22, 0xef, 0xb6,
	0x47, 0x18, 0xf6, 0x10, 0x7b, 0x92, 0x81, 0x14, 0xe5, 0x48, 0x96, 0xed, 0x2d, 0xe9, 0x1d, 0xcf,
	0xc7, 0x73, 0x3e, 0x7f, 0xe7, 0x8f, 0x32, 0x90, 0x37, 0x67, 0xd3, 0x37, 0x28, 0x25, 0xa6, 0x11,
	0xe6, 0x93, 0x2c, 0x17, 0x4a, 0x90, 0x41, 0x15, 0xa3, 0x3f, 0x42, 0x37, 0xc0, 0x3f, 0x96, 0x28,
	0x15, 0xf9, 0x0c, 0x40, 0xa2, 0x94, 0x5c, 0xa4, 0xef, 0xf0, 0xda, 0x6b, 0x8d, 0x9c, 0x71, 0x2f,
	0xa8, 0x20, 0xc4, 0x83, 0x6e, 0x5e, 0xb8, 0x7a, 0x8e, 0xb9, 0x2c, 0x4d, 0xf2, 0x11, 0xb4, 0x78,
	0xe8, 0xb5, 0x0d, 0xd8, 0xe2, 0x21, 0x7d, 0x04, 0x9d, 0x00, 0xb3, 0xf8, 0x9a, 0x1c, 0x42, 0x3b,
	0xc7, 0xcc, 0xba, 0xeb, 0x23, 0xed, 0x42, 0xe7, 0x55, 0x92, 0xa9, 0x6b, 0xea, 0x43, 0xef, 0x5c,
	0x62, 0x3e, 0x17, 0x11, 0x4f, 0xc9, 0x10, 0xdc, 0xa5, 0xc4, 0x3c, 0x65, 0x09, 0x5a, 0xe7, 0x95,
	0xad, 0xef, 0x32, 0x26, 0xe5, 0x7b, 0x91, 0x87, 0x56, 0xd4, 0xca, 0xa6, 0x7f, 0x3b, 0xb0, 0xaf,
	0x59, 0xf4, 0x0f, 0x2d, 0x79, 0x68, 0x62, 0xf7, 0x03, 0x7d, 0xac, 0x51, 0xb6, 0xd6, 0x28, 0x1f,
	0x40, 0x27, 0xbb, 0x14, 0x29, 0x7a, 0xfb, 0xe6, 0xa2, 0x30, 0x34, 0x8a, 0x09, 0xe3, 0xb1, 0xd7,
	0x29, 0x50, 0x63, 0x90, 0x11, 0xf4, 0x17, 0x39, 0x32, 0x85, 0xe1, 0x19, 0x4f, 0xd0, 0x3b, 0x30,
	0x77, 0x55, 0x88, 0x1c, 0xc1, 0x01, 0xbb, 0x62, 0x8a, 0xe5, 0x5e, 0x77, 0xe4, 0x8c, 0x07, 0x81,
	0xb5, 0x0c, 0xbe, 0x50, 0xfc, 0x0a, 0x4d, 0x65, 0xdc, 0xc0, 0x5a, 0xb5, 0x84, 0xdc, 0xb5, 0x84,
	0x7e, 0x05, 0x57, 0xe7, 0x73, 0x92, 0x5e, 0x88, 0xb5, 0x7e, 0x38, 0x8d, 0x7e, 0x4c, 0xc0, 0xe5,
	0xe9, 0x85, 0xd0, 0x59, 0x99, 0x0c, 0xfb, 0xc7, 0x64, 0x52, 0xeb, 0xb7, 0x66, 0x0a, 0x56, 0x3e,
	0xf4, 0x19, 0xb8, 0x01, 0xca, 0x4c, 0xa4, 0xd2, 0x68, 0xc8, 0xed, 0xb9, 0x2c, 0x78, 0x69, 0xeb,
	0x3a, 0x2c, 0x2e, 0x71, 0xf1, 0xce, 0x90, 0xba, 0x41, 0x61, 0xd0, 0x3f, 0x1d, 0xe8, 0x6a, 0x6a,
	0x16, 0xa1, 0xae, 0x76, 0x72, 0x53, 0xed, 0x84, 0x87, 0xff, 0x67, 0x76, 0x16, 0x22, 0x55, 0x98,
	0x2a, 0x5b, 0xdd, 0xd2, 0x5c, 0xaf, 0xef, 0x7e, 0xb3, 0xbe, 0x9f, 0x40, 0xef, 0x22, 0x17, 0xc9,
	0x6f, 0xa6, 0x95, 0xdd, 0x42, 0xac, 0x06, 0xde, 0xda, 0x56, 0x9e, 0x24, 0x2c, 0x42, 0xaf, 0x67,
	0x6a, 0x5f, 0x18, 0x5a, 0xe0, 0x62, 0x35, 0x91, 0xfa, 0x48, 0xff, 0x72, 0x60, 0xe0, 0x8b, 0xf4,
	0x0a, 0x73, 0xc9, 0x14, 0x17, 0x69, 0xe9, 0xe2, 0xac, 0x5c, 0xc8, 0x17, 0x70, 0x58, 0xf5, 0x78,
	0x7b, 0x33, 0x39, 0x0d, 0x5c, 0xe7, 0x3b, 0x67, 0xb2, 0x2e, 0xba, 0x82, 0x10, 0x0a, 0x83, 0x98,
	0x4b, 0xb5, 0x9a, 0xc0, 0x22, 0xe9, 0x1a, 0xa6, 0x33, 0x8f, 0x99, 0x54, 0xb6, 0xa8, 0x56, 0x6c,
	0x15, 0xd2, 0x55, 0x33, 0x26, 0x0f, 0xed, 0xdc, 0x95, 0x26, 0xfd, 0x05, 0xee, 0x4f, 0xe3, 0xb8,
	0x96, 0xd0, 0x6b, 0x38, 0xd4, 0xf4, 0x55, 0xcc, 0x73, 0x46, 0xed, 0x71, 0xff, 0x78, 0x58, 0x1f,
	0x8b, 0xaa, 0x47, 0xd0, 0x88, 0xa1, 0x73, 0xb8, 0xff, 0x13, 0xe3, 0x4a, 0xf1, 0x34, 0x2a, 0x75,
	0x3c, 0x81, 0xc1, 0x7b, 0x0b, 0x25, 0x28, 0xa5, 0xa5, 0x7d, 0x58, 0xa7, 0xb5, 0xce, 0x41, 0xcd,
	0x95, 0x3e, 0x87, 0xfe, 0x34, 0x8e, 0xed, 0x9d, 0x24, 0x5f, 0x41, 0x97, 0xc5, 0xf1, 0x7f, 0x93,
	0x94, 0x5e, 0xf4, 0x5b, 0x13, 0xaf, 0xf7, 0xc1, 0xec, 0xf9, 0x97, 0x26, 0xde, 0x8c, 0x7c, 0x11,
	0xbf, 0x69, 0xe4, 0x4b, 0x17, 0xfa, 0x33, 0x90, 0x6a, 0x6a, 0x2f, 0x51, 0xe9, 0x8d, 0xae, 0xcf,
	0x6a, 0xbb, 0x31, 0xab, 0xcd, 0xc9, 0xb0, 0xaf, 0x4b, 0x6b, 0xd4, 0xd6, 0xc8, 0x92, 0x87, 0xc7,
	0xff, 0xb8, 0xe0, 0xfa, 0x97, 0x4c, 0x45, 0xc1, 0xa9, 0x4f, 0xbe, 0x83, 0x5e, 0x20, 0x96, 0x0a,
	0x35, 0x40, 0x36, 0x27, 0x34, 0xdc, 0x0c, 0xd3, 0xbd, 0xb1, 0xf3, 0xb5, 0x43, 0x1e, 0xeb, 0xcd,
	0x8c, 0xb8, 0x54, 0x98, 0x93, 0x0d, 0x09, 0x0d, 0x8f, 0xea, 0x58, 0xb9, 0xc5, 0x74, 0x8f, 0x3c,
	0x85, 0x4e, 0xf1, 0x82, 0x7e, 0xdc, 0x0c, 0x33, 0x17, 0x3b, 0x62, 0x9f, 0xc0, 0xc1, 0x5c, 0x44,
	0x62, 0xd9, 0xd0, 0x6c, 0x3f, 0x08, 0x3b, 0x42, 0x9f, 0x41, 0xcf, 0xd7, 0xaf, 0x82, 0xe9, 0xc9,
	0xad, 0xa3, 0x1f, 0x43, 0x67, 0x86, 0xea, 0x24, 0xbc, 0x7d, 0xe4, 0x2b, 0x20, 0xbe, 0x79, 0x19,
	0x6a, 0x93, 0x7f, 0x6b, 0x9a, 0x39, 0x90, 0x19, 0xaa, 0xf5, 0x05, 0xda, 0x42, 0xf3, 0x69, 0x1d,
	0x5e, 0x8b, 0xa2, 0x7b, 0x64, 0x06, 0x0f, 0xa6, 0x61, 0x78, 0xce, 0xc3, 0x33, 0xf1, 0x61, 0xb2,
	0x7c, 0xb8, 0x37, 0x17, 0x2c, 0xd4, 0x77, 0x3f, 0xa4, 0x3e, 0xdf, 0x5a, 0x9f, 0x47, 0x0d, 0x45,
	0xe5, 0x7e, 0x15, 0xad, 0x99, 0x86, 0xe1, 0xeb, 0x9c, 0x63, 0x7a, 0x87, 0x02, 0x4f, 0xa1, 0x3f,
	0x43, 0x35, 0xe7, 0x52, 0xed, 0x6a, 0x6d, 0x53, 0x40, 0xb9, 0xa0, 0x45, 0x16, 0x96, 0x62, 0xb7,
	0x88, 0x9d, 0x24, 0x4f, 0x8d, 0x8e, 0xd5, 0xda, 0x6f, 0xa1, 0xd8, 0xb0, 0x2b, 0x74, 0x8f, 0x7c,
	0x0f, 0xf7, 0x5e, 0x62, 0x8c, 0x0a, 0xcb, 0xe7, 0xeb, 0x2e, 0x63, 0x56, 0x30, 0x94, 0xfd, 0x94,
	0x77, 0xea, 0xe7, 0x73, 0x80, 0xf3, 0x2c, 0x64, 0x0a, 0xcd, 0xe7, 0xfc, 0xa8, 0x29, 0x56, 0xe3,
	0xdb, 0xe3, 0x5f, 0x7c, 0x0e, 0x0f, 0xb9, 0x98, 0x44, 0x79, 0xb6, 0x98, 0x24, 0x8a, 0x4d, 0x92,
	0xd2, 0xe7, 0x85, 0x79, 0x7a, 0x66, 0xc1, 0xa9, 0x7f, 0xea, 0xfc, 0x7e, 0x60, 0xfe, 0xd5, 0x7d,
	0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x2f, 0x0d, 0x56, 0xeb, 0x09, 0x00, 0x00,
}
