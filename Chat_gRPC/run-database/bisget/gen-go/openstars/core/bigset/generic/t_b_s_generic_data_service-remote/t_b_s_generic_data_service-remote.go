// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "openstars/core/bigset/generic"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  TPutItemResult bsgPutItem(TContainerKey rootID, TItem item)")
  fmt.Fprintln(os.Stderr, "  bool bsgRemoveItem(TMetaKey key, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TExistedResult bsgExisted(TContainerKey rootID, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TItemResult bsgGetItem(TContainerKey rootID, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsgGetSlice(TContainerKey rootID, i32 fromIndex, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsgGetSliceFromItem(TContainerKey rootID, TItemKey fromKey, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsgGetSliceR(TContainerKey rootID, i32 fromIndex, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsgGetSliceFromItemR(TContainerKey rootID, TItemKey fromKey, i32 count)")
  fmt.Fprintln(os.Stderr, "  TSplitBigSetResult splitBigSet(TContainerKey rootID, TContainerKey brotherRootID, i64 currentSize)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsgRangeQuery(TContainerKey rootID, TItemKey startKey, TItemKey endKey)")
  fmt.Fprintln(os.Stderr, "  bool bsgBulkLoad(TContainerKey rootID, TItemSet setData)")
  fmt.Fprintln(os.Stderr, "  TMultiPutItemResult bsgMultiPut(TContainerKey rootID, TItemSet setData, bool getAddedItems, bool getReplacedItems)")
  fmt.Fprintln(os.Stderr, "  TBigSetGenericData getSetGenData(TMetaKey metaID)")
  fmt.Fprintln(os.Stderr, "  void putSetGenData(TMetaKey metaID, TBigSetGenericData metadata)")
  fmt.Fprintln(os.Stderr, "  i64 getTotalCount(TMetaKey metaID)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := generic.NewTBSGenericDataServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "bsgPutItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsgPutItem requires 2 args")
      flag.Usage()
    }
    argvalue0, err48 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err48 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    arg49 := flag.Arg(2)
    mbTrans50 := thrift.NewTMemoryBufferLen(len(arg49))
    defer mbTrans50.Close()
    _, err51 := mbTrans50.WriteString(arg49)
    if err51 != nil {
      Usage()
      return
    }
    factory52 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt53 := factory52.GetProtocol(mbTrans50)
    argvalue1 := generic.NewTItem()
    err54 := argvalue1.Read(jsProt53)
    if err54 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.BsgPutItem(value0, value1))
    fmt.Print("\n")
    break
  case "bsgRemoveItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsgRemoveItem requires 2 args")
      flag.Usage()
    }
    argvalue0, err55 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err55 != nil {
      Usage()
      return
    }
    value0 := generic.TMetaKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.BsgRemoveItem(value0, value1))
    fmt.Print("\n")
    break
  case "bsgExisted":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsgExisted requires 2 args")
      flag.Usage()
    }
    argvalue0, err57 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err57 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.BsgExisted(value0, value1))
    fmt.Print("\n")
    break
  case "bsgGetItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsgGetItem requires 2 args")
      flag.Usage()
    }
    argvalue0, err59 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err59 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.BsgGetItem(value0, value1))
    fmt.Print("\n")
    break
  case "bsgGetSlice":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsgGetSlice requires 3 args")
      flag.Usage()
    }
    argvalue0, err61 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err61 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    tmp1, err62 := (strconv.Atoi(flag.Arg(2)))
    if err62 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err63 := (strconv.Atoi(flag.Arg(3)))
    if err63 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BsgGetSlice(value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsgGetSliceFromItem":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsgGetSliceFromItem requires 3 args")
      flag.Usage()
    }
    argvalue0, err64 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err64 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    tmp2, err66 := (strconv.Atoi(flag.Arg(3)))
    if err66 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BsgGetSliceFromItem(value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsgGetSliceR":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsgGetSliceR requires 3 args")
      flag.Usage()
    }
    argvalue0, err67 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err67 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    tmp1, err68 := (strconv.Atoi(flag.Arg(2)))
    if err68 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err69 := (strconv.Atoi(flag.Arg(3)))
    if err69 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BsgGetSliceR(value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsgGetSliceFromItemR":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsgGetSliceFromItemR requires 3 args")
      flag.Usage()
    }
    argvalue0, err70 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err70 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    tmp2, err72 := (strconv.Atoi(flag.Arg(3)))
    if err72 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BsgGetSliceFromItemR(value0, value1, value2))
    fmt.Print("\n")
    break
  case "splitBigSet":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SplitBigSet requires 3 args")
      flag.Usage()
    }
    argvalue0, err73 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err73 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    argvalue1, err74 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err74 != nil {
      Usage()
      return
    }
    value1 := generic.TContainerKey(argvalue1)
    argvalue2, err75 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err75 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SplitBigSet(value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsgRangeQuery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsgRangeQuery requires 3 args")
      flag.Usage()
    }
    argvalue0, err76 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err76 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := generic.TItemKey(argvalue2)
    fmt.Print(client.BsgRangeQuery(value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsgBulkLoad":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsgBulkLoad requires 2 args")
      flag.Usage()
    }
    argvalue0, err79 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err79 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    arg80 := flag.Arg(2)
    mbTrans81 := thrift.NewTMemoryBufferLen(len(arg80))
    defer mbTrans81.Close()
    _, err82 := mbTrans81.WriteString(arg80)
    if err82 != nil {
      Usage()
      return
    }
    factory83 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt84 := factory83.GetProtocol(mbTrans81)
    argvalue1 := generic.NewTItemSet()
    err85 := argvalue1.Read(jsProt84)
    if err85 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.BsgBulkLoad(value0, value1))
    fmt.Print("\n")
    break
  case "bsgMultiPut":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "BsgMultiPut requires 4 args")
      flag.Usage()
    }
    argvalue0, err86 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err86 != nil {
      Usage()
      return
    }
    value0 := generic.TContainerKey(argvalue0)
    arg87 := flag.Arg(2)
    mbTrans88 := thrift.NewTMemoryBufferLen(len(arg87))
    defer mbTrans88.Close()
    _, err89 := mbTrans88.WriteString(arg87)
    if err89 != nil {
      Usage()
      return
    }
    factory90 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt91 := factory90.GetProtocol(mbTrans88)
    argvalue1 := generic.NewTItemSet()
    err92 := argvalue1.Read(jsProt91)
    if err92 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.BsgMultiPut(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getSetGenData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSetGenData requires 1 args")
      flag.Usage()
    }
    argvalue0, err95 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err95 != nil {
      Usage()
      return
    }
    value0 := generic.TMetaKey(argvalue0)
    fmt.Print(client.GetSetGenData(value0))
    fmt.Print("\n")
    break
  case "putSetGenData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PutSetGenData requires 2 args")
      flag.Usage()
    }
    argvalue0, err96 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err96 != nil {
      Usage()
      return
    }
    value0 := generic.TMetaKey(argvalue0)
    arg97 := flag.Arg(2)
    mbTrans98 := thrift.NewTMemoryBufferLen(len(arg97))
    defer mbTrans98.Close()
    _, err99 := mbTrans98.WriteString(arg97)
    if err99 != nil {
      Usage()
      return
    }
    factory100 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt101 := factory100.GetProtocol(mbTrans98)
    argvalue1 := generic.NewTBigSetGenericData()
    err102 := argvalue1.Read(jsProt101)
    if err102 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PutSetGenData(value0, value1))
    fmt.Print("\n")
    break
  case "getTotalCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTotalCount requires 1 args")
      flag.Usage()
    }
    argvalue0, err103 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err103 != nil {
      Usage()
      return
    }
    value0 := generic.TMetaKey(argvalue0)
    fmt.Print(client.GetTotalCount(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
