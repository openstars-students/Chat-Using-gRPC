// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generic

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type BSNotificationPool interface {
	// Parameters:
	//  - RootID
	//  - SplitInfo
	NeedSplit(rootID TContainerKey, splitInfo *TNeedSplitInfo) (err error)
	// Parameters:
	//  - RootID
	SplitInfoUpdated(rootID TContainerKey) (err error)
	GetJob() (r *SplitJob, err error)
}

type BSNotificationPoolClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBSNotificationPoolClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BSNotificationPoolClient {
	return &BSNotificationPoolClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBSNotificationPoolClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BSNotificationPoolClient {
	return &BSNotificationPoolClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RootID
//  - SplitInfo
func (p *BSNotificationPoolClient) NeedSplit(rootID TContainerKey, splitInfo *TNeedSplitInfo) (err error) {
	if err = p.sendNeedSplit(rootID, splitInfo); err != nil {
		return
	}
	return p.recvNeedSplit()
}

func (p *BSNotificationPoolClient) sendNeedSplit(rootID TContainerKey, splitInfo *TNeedSplitInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("needSplit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BSNotificationPoolNeedSplitArgs{
		RootID:    rootID,
		SplitInfo: splitInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BSNotificationPoolClient) recvNeedSplit() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "needSplit" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "needSplit failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "needSplit failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error256 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error257 error
		error257, err = error256.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error257
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "needSplit failed: invalid message type")
		return
	}
	result := BSNotificationPoolNeedSplitResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - RootID
func (p *BSNotificationPoolClient) SplitInfoUpdated(rootID TContainerKey) (err error) {
	if err = p.sendSplitInfoUpdated(rootID); err != nil {
		return
	}
	return p.recvSplitInfoUpdated()
}

func (p *BSNotificationPoolClient) sendSplitInfoUpdated(rootID TContainerKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("splitInfoUpdated", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BSNotificationPoolSplitInfoUpdatedArgs{
		RootID: rootID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BSNotificationPoolClient) recvSplitInfoUpdated() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "splitInfoUpdated" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "splitInfoUpdated failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "splitInfoUpdated failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error258 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error259 error
		error259, err = error258.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error259
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "splitInfoUpdated failed: invalid message type")
		return
	}
	result := BSNotificationPoolSplitInfoUpdatedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

func (p *BSNotificationPoolClient) GetJob() (r *SplitJob, err error) {
	if err = p.sendGetJob(); err != nil {
		return
	}
	return p.recvGetJob()
}

func (p *BSNotificationPoolClient) sendGetJob() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getJob", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BSNotificationPoolGetJobArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BSNotificationPoolClient) recvGetJob() (value *SplitJob, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getJob" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getJob failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getJob failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error260 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error261 error
		error261, err = error260.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error261
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getJob failed: invalid message type")
		return
	}
	result := BSNotificationPoolGetJobResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type BSNotificationPoolProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BSNotificationPool
}

func (p *BSNotificationPoolProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BSNotificationPoolProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BSNotificationPoolProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBSNotificationPoolProcessor(handler BSNotificationPool) *BSNotificationPoolProcessor {

	self262 := &BSNotificationPoolProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self262.processorMap["needSplit"] = &bSNotificationPoolProcessorNeedSplit{handler: handler}
	self262.processorMap["splitInfoUpdated"] = &bSNotificationPoolProcessorSplitInfoUpdated{handler: handler}
	self262.processorMap["getJob"] = &bSNotificationPoolProcessorGetJob{handler: handler}
	return self262
}

func (p *BSNotificationPoolProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x263 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x263.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x263

}

type bSNotificationPoolProcessorNeedSplit struct {
	handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorNeedSplit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BSNotificationPoolNeedSplitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("needSplit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BSNotificationPoolNeedSplitResult{}
	var err2 error
	if err2 = p.handler.NeedSplit(args.RootID, args.SplitInfo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing needSplit: "+err2.Error())
		oprot.WriteMessageBegin("needSplit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("needSplit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bSNotificationPoolProcessorSplitInfoUpdated struct {
	handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorSplitInfoUpdated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BSNotificationPoolSplitInfoUpdatedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("splitInfoUpdated", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BSNotificationPoolSplitInfoUpdatedResult{}
	var err2 error
	if err2 = p.handler.SplitInfoUpdated(args.RootID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitInfoUpdated: "+err2.Error())
		oprot.WriteMessageBegin("splitInfoUpdated", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("splitInfoUpdated", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bSNotificationPoolProcessorGetJob struct {
	handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorGetJob) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BSNotificationPoolGetJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BSNotificationPoolGetJobResult{}
	var retval *SplitJob
	var err2 error
	if retval, err2 = p.handler.GetJob(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getJob: "+err2.Error())
		oprot.WriteMessageBegin("getJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RootID
//  - SplitInfo
type BSNotificationPoolNeedSplitArgs struct {
	RootID    TContainerKey   `thrift:"rootID,1" json:"rootID"`
	SplitInfo *TNeedSplitInfo `thrift:"splitInfo,2" json:"splitInfo"`
}

func NewBSNotificationPoolNeedSplitArgs() *BSNotificationPoolNeedSplitArgs {
	return &BSNotificationPoolNeedSplitArgs{}
}

func (p *BSNotificationPoolNeedSplitArgs) GetRootID() TContainerKey {
	return p.RootID
}

var BSNotificationPoolNeedSplitArgs_SplitInfo_DEFAULT *TNeedSplitInfo

func (p *BSNotificationPoolNeedSplitArgs) GetSplitInfo() *TNeedSplitInfo {
	if !p.IsSetSplitInfo() {
		return BSNotificationPoolNeedSplitArgs_SplitInfo_DEFAULT
	}
	return p.SplitInfo
}
func (p *BSNotificationPoolNeedSplitArgs) IsSetSplitInfo() bool {
	return p.SplitInfo != nil
}

func (p *BSNotificationPoolNeedSplitArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BSNotificationPoolNeedSplitArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *BSNotificationPoolNeedSplitArgs) readField2(iprot thrift.TProtocol) error {
	p.SplitInfo = &TNeedSplitInfo{}
	if err := p.SplitInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
	}
	return nil
}

func (p *BSNotificationPoolNeedSplitArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("needSplit_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BSNotificationPoolNeedSplitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *BSNotificationPoolNeedSplitArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitInfo: ", p), err)
	}
	if err := p.SplitInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitInfo: ", p), err)
	}
	return err
}

func (p *BSNotificationPoolNeedSplitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSNotificationPoolNeedSplitArgs(%+v)", *p)
}

type BSNotificationPoolNeedSplitResult struct {
}

func NewBSNotificationPoolNeedSplitResult() *BSNotificationPoolNeedSplitResult {
	return &BSNotificationPoolNeedSplitResult{}
}

func (p *BSNotificationPoolNeedSplitResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BSNotificationPoolNeedSplitResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("needSplit_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BSNotificationPoolNeedSplitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSNotificationPoolNeedSplitResult(%+v)", *p)
}

// Attributes:
//  - RootID
type BSNotificationPoolSplitInfoUpdatedArgs struct {
	RootID TContainerKey `thrift:"rootID,1" json:"rootID"`
}

func NewBSNotificationPoolSplitInfoUpdatedArgs() *BSNotificationPoolSplitInfoUpdatedArgs {
	return &BSNotificationPoolSplitInfoUpdatedArgs{}
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) GetRootID() TContainerKey {
	return p.RootID
}
func (p *BSNotificationPoolSplitInfoUpdatedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("splitInfoUpdated_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSNotificationPoolSplitInfoUpdatedArgs(%+v)", *p)
}

type BSNotificationPoolSplitInfoUpdatedResult struct {
}

func NewBSNotificationPoolSplitInfoUpdatedResult() *BSNotificationPoolSplitInfoUpdatedResult {
	return &BSNotificationPoolSplitInfoUpdatedResult{}
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("splitInfoUpdated_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSNotificationPoolSplitInfoUpdatedResult(%+v)", *p)
}

type BSNotificationPoolGetJobArgs struct {
}

func NewBSNotificationPoolGetJobArgs() *BSNotificationPoolGetJobArgs {
	return &BSNotificationPoolGetJobArgs{}
}

func (p *BSNotificationPoolGetJobArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BSNotificationPoolGetJobArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getJob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BSNotificationPoolGetJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSNotificationPoolGetJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BSNotificationPoolGetJobResult struct {
	Success *SplitJob `thrift:"success,0" json:"success,omitempty"`
}

func NewBSNotificationPoolGetJobResult() *BSNotificationPoolGetJobResult {
	return &BSNotificationPoolGetJobResult{}
}

var BSNotificationPoolGetJobResult_Success_DEFAULT *SplitJob

func (p *BSNotificationPoolGetJobResult) GetSuccess() *SplitJob {
	if !p.IsSetSuccess() {
		return BSNotificationPoolGetJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BSNotificationPoolGetJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BSNotificationPoolGetJobResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BSNotificationPoolGetJobResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SplitJob{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BSNotificationPoolGetJobResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getJob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BSNotificationPoolGetJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BSNotificationPoolGetJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSNotificationPoolGetJobResult(%+v)", *p)
}
