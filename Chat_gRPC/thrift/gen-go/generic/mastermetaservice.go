// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generic

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type MasterMetaService interface {
	// Parameters:
	//  - Key
	GetMetaID(key TKey) (r TMetaKey, err error)
	// Parameters:
	//  - Key
	//  - MetaID
	SetMetaID(key TKey, metaID TMetaKey) (r bool, err error)
}

type MasterMetaServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMasterMetaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MasterMetaServiceClient {
	return &MasterMetaServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMasterMetaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MasterMetaServiceClient {
	return &MasterMetaServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Key
func (p *MasterMetaServiceClient) GetMetaID(key TKey) (r TMetaKey, err error) {
	if err = p.sendGetMetaID(key); err != nil {
		return
	}
	return p.recvGetMetaID()
}

func (p *MasterMetaServiceClient) sendGetMetaID(key TKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMetaID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MasterMetaServiceGetMetaIDArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MasterMetaServiceClient) recvGetMetaID() (value TMetaKey, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getMetaID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getMetaID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMetaID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getMetaID failed: invalid message type")
		return
	}
	result := MasterMetaServiceGetMetaIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - MetaID
func (p *MasterMetaServiceClient) SetMetaID(key TKey, metaID TMetaKey) (r bool, err error) {
	if err = p.sendSetMetaID(key, metaID); err != nil {
		return
	}
	return p.recvSetMetaID()
}

func (p *MasterMetaServiceClient) sendSetMetaID(key TKey, metaID TMetaKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setMetaID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MasterMetaServiceSetMetaIDArgs{
		Key:    key,
		MetaID: metaID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MasterMetaServiceClient) recvSetMetaID() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setMetaID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setMetaID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setMetaID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setMetaID failed: invalid message type")
		return
	}
	result := MasterMetaServiceSetMetaIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type MasterMetaServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MasterMetaService
}

func (p *MasterMetaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MasterMetaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MasterMetaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMasterMetaServiceProcessor(handler MasterMetaService) *MasterMetaServiceProcessor {

	self11 := &MasterMetaServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self11.processorMap["getMetaID"] = &masterMetaServiceProcessorGetMetaID{handler: handler}
	self11.processorMap["setMetaID"] = &masterMetaServiceProcessorSetMetaID{handler: handler}
	return self11
}

func (p *MasterMetaServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x12.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x12

}

type masterMetaServiceProcessorGetMetaID struct {
	handler MasterMetaService
}

func (p *masterMetaServiceProcessorGetMetaID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MasterMetaServiceGetMetaIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMetaID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MasterMetaServiceGetMetaIDResult{}
	var retval TMetaKey
	var err2 error
	if retval, err2 = p.handler.GetMetaID(args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaID: "+err2.Error())
		oprot.WriteMessageBegin("getMetaID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getMetaID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type masterMetaServiceProcessorSetMetaID struct {
	handler MasterMetaService
}

func (p *masterMetaServiceProcessorSetMetaID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MasterMetaServiceSetMetaIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setMetaID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MasterMetaServiceSetMetaIDResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.SetMetaID(args.Key, args.MetaID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setMetaID: "+err2.Error())
		oprot.WriteMessageBegin("setMetaID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("setMetaID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type MasterMetaServiceGetMetaIDArgs struct {
	Key TKey `thrift:"key,1" json:"key"`
}

func NewMasterMetaServiceGetMetaIDArgs() *MasterMetaServiceGetMetaIDArgs {
	return &MasterMetaServiceGetMetaIDArgs{}
}

func (p *MasterMetaServiceGetMetaIDArgs) GetKey() TKey {
	return p.Key
}
func (p *MasterMetaServiceGetMetaIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.Key = temp
	}
	return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMetaID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *MasterMetaServiceGetMetaIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MasterMetaServiceGetMetaIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterMetaServiceGetMetaIDResult struct {
	Success *TMetaKey `thrift:"success,0" json:"success,omitempty"`
}

func NewMasterMetaServiceGetMetaIDResult() *MasterMetaServiceGetMetaIDResult {
	return &MasterMetaServiceGetMetaIDResult{}
}

var MasterMetaServiceGetMetaIDResult_Success_DEFAULT TMetaKey

func (p *MasterMetaServiceGetMetaIDResult) GetSuccess() TMetaKey {
	if !p.IsSetSuccess() {
		return MasterMetaServiceGetMetaIDResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MasterMetaServiceGetMetaIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MasterMetaServiceGetMetaIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MasterMetaServiceGetMetaIDResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := TMetaKey(v)
		p.Success = &temp
	}
	return nil
}

func (p *MasterMetaServiceGetMetaIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMetaID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MasterMetaServiceGetMetaIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MasterMetaServiceGetMetaIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MasterMetaServiceGetMetaIDResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - MetaID
type MasterMetaServiceSetMetaIDArgs struct {
	Key    TKey     `thrift:"key,1" json:"key"`
	MetaID TMetaKey `thrift:"metaID,2" json:"metaID"`
}

func NewMasterMetaServiceSetMetaIDArgs() *MasterMetaServiceSetMetaIDArgs {
	return &MasterMetaServiceSetMetaIDArgs{}
}

func (p *MasterMetaServiceSetMetaIDArgs) GetKey() TKey {
	return p.Key
}

func (p *MasterMetaServiceSetMetaIDArgs) GetMetaID() TMetaKey {
	return p.MetaID
}
func (p *MasterMetaServiceSetMetaIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.Key = temp
	}
	return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TMetaKey(v)
		p.MetaID = temp
	}
	return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setMetaID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *MasterMetaServiceSetMetaIDArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err)
	}
	return err
}

func (p *MasterMetaServiceSetMetaIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MasterMetaServiceSetMetaIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterMetaServiceSetMetaIDResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewMasterMetaServiceSetMetaIDResult() *MasterMetaServiceSetMetaIDResult {
	return &MasterMetaServiceSetMetaIDResult{}
}

var MasterMetaServiceSetMetaIDResult_Success_DEFAULT bool

func (p *MasterMetaServiceSetMetaIDResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return MasterMetaServiceSetMetaIDResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MasterMetaServiceSetMetaIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MasterMetaServiceSetMetaIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MasterMetaServiceSetMetaIDResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MasterMetaServiceSetMetaIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setMetaID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MasterMetaServiceSetMetaIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MasterMetaServiceSetMetaIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MasterMetaServiceSetMetaIDResult(%+v)", *p)
}
