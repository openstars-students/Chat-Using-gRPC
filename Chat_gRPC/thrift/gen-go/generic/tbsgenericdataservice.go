// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generic

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TBSGenericDataService interface {
	// Parameters:
	//  - RootID
	//  - Item
	BsgPutItem(rootID TContainerKey, item *TItem) (r *TPutItemResult_, err error)
	// Parameters:
	//  - Key
	//  - ItemKey
	BsgRemoveItem(key TMetaKey, itemKey TItemKey) (r bool, err error)
	// Parameters:
	//  - RootID
	//  - ItemKey
	BsgExisted(rootID TContainerKey, itemKey TItemKey) (r *TExistedResult_, err error)
	// Parameters:
	//  - RootID
	//  - ItemKey
	BsgGetItem(rootID TContainerKey, itemKey TItemKey) (r *TItemResult_, err error)
	// Parameters:
	//  - RootID
	//  - FromIndex
	//  - Count
	BsgGetSlice(rootID TContainerKey, fromIndex int32, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - RootID
	//  - FromKey
	//  - Count
	BsgGetSliceFromItem(rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - RootID
	//  - FromIndex
	//  - Count
	BsgGetSliceR(rootID TContainerKey, fromIndex int32, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - RootID
	//  - FromKey
	//  - Count
	BsgGetSliceFromItemR(rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - RootID
	//  - BrotherRootID
	//  - CurrentSize
	SplitBigSet(rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (r *TSplitBigSetResult_, err error)
	// Parameters:
	//  - RootID
	//  - StartKey
	//  - EndKey
	BsgRangeQuery(rootID TContainerKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
	// Parameters:
	//  - RootID
	//  - SetData
	BsgBulkLoad(rootID TContainerKey, setData *TItemSet) (r bool, err error)
	// Parameters:
	//  - RootID
	//  - SetData
	//  - GetAddedItems
	//  - GetReplacedItems
	BsgMultiPut(rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
	// Parameters:
	//  - MetaID
	GetSetGenData(metaID TMetaKey) (r *TBigSetGenericData, err error)
	// Parameters:
	//  - MetaID
	//  - Metadata
	PutSetGenData(metaID TMetaKey, metadata *TBigSetGenericData) (err error)
	// Parameters:
	//  - MetaID
	GetTotalCount(metaID TMetaKey) (r int64, err error)
}

type TBSGenericDataServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTBSGenericDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TBSGenericDataServiceClient {
	return &TBSGenericDataServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTBSGenericDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TBSGenericDataServiceClient {
	return &TBSGenericDataServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RootID
//  - Item
func (p *TBSGenericDataServiceClient) BsgPutItem(rootID TContainerKey, item *TItem) (r *TPutItemResult_, err error) {
	if err = p.sendBsgPutItem(rootID, item); err != nil {
		return
	}
	return p.recvBsgPutItem()
}

func (p *TBSGenericDataServiceClient) sendBsgPutItem(rootID TContainerKey, item *TItem) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgPutItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgPutItemArgs{
		RootID: rootID,
		Item:   item,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgPutItem() (value *TPutItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgPutItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgPutItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgPutItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgPutItem failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgPutItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgRemoveItem(key TMetaKey, itemKey TItemKey) (r bool, err error) {
	if err = p.sendBsgRemoveItem(key, itemKey); err != nil {
		return
	}
	return p.recvBsgRemoveItem()
}

func (p *TBSGenericDataServiceClient) sendBsgRemoveItem(key TMetaKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgRemoveItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgRemoveItemArgs{
		Key:     key,
		ItemKey: itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgRemoveItem() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgRemoveItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgRemoveItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgRemoveItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgRemoveItem failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgRemoveItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgExisted(rootID TContainerKey, itemKey TItemKey) (r *TExistedResult_, err error) {
	if err = p.sendBsgExisted(rootID, itemKey); err != nil {
		return
	}
	return p.recvBsgExisted()
}

func (p *TBSGenericDataServiceClient) sendBsgExisted(rootID TContainerKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgExisted", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgExistedArgs{
		RootID:  rootID,
		ItemKey: itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgExisted() (value *TExistedResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgExisted" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgExisted failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgExisted failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgExisted failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgExistedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgGetItem(rootID TContainerKey, itemKey TItemKey) (r *TItemResult_, err error) {
	if err = p.sendBsgGetItem(rootID, itemKey); err != nil {
		return
	}
	return p.recvBsgGetItem()
}

func (p *TBSGenericDataServiceClient) sendBsgGetItem(rootID TContainerKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgGetItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgGetItemArgs{
		RootID:  rootID,
		ItemKey: itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgGetItem() (value *TItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgGetItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgGetItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgGetItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgGetItem failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgGetItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - FromIndex
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSlice(rootID TContainerKey, fromIndex int32, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendBsgGetSlice(rootID, fromIndex, count); err != nil {
		return
	}
	return p.recvBsgGetSlice()
}

func (p *TBSGenericDataServiceClient) sendBsgGetSlice(rootID TContainerKey, fromIndex int32, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgGetSlice", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgGetSliceArgs{
		RootID:    rootID,
		FromIndex: fromIndex,
		Count:     count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgGetSlice() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgGetSlice" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgGetSlice failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgGetSlice failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgGetSlice failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgGetSliceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - FromKey
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceFromItem(rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendBsgGetSliceFromItem(rootID, fromKey, count); err != nil {
		return
	}
	return p.recvBsgGetSliceFromItem()
}

func (p *TBSGenericDataServiceClient) sendBsgGetSliceFromItem(rootID TContainerKey, fromKey TItemKey, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgGetSliceFromItemArgs{
		RootID:  rootID,
		FromKey: fromKey,
		Count:   count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgGetSliceFromItem() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgGetSliceFromItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgGetSliceFromItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgGetSliceFromItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgGetSliceFromItem failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgGetSliceFromItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - FromIndex
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceR(rootID TContainerKey, fromIndex int32, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendBsgGetSliceR(rootID, fromIndex, count); err != nil {
		return
	}
	return p.recvBsgGetSliceR()
}

func (p *TBSGenericDataServiceClient) sendBsgGetSliceR(rootID TContainerKey, fromIndex int32, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgGetSliceR", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgGetSliceRArgs{
		RootID:    rootID,
		FromIndex: fromIndex,
		Count:     count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgGetSliceR() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgGetSliceR" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgGetSliceR failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgGetSliceR failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgGetSliceR failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgGetSliceRResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - FromKey
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceFromItemR(rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendBsgGetSliceFromItemR(rootID, fromKey, count); err != nil {
		return
	}
	return p.recvBsgGetSliceFromItemR()
}

func (p *TBSGenericDataServiceClient) sendBsgGetSliceFromItemR(rootID TContainerKey, fromKey TItemKey, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgGetSliceFromItemRArgs{
		RootID:  rootID,
		FromKey: fromKey,
		Count:   count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgGetSliceFromItemR() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgGetSliceFromItemR" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgGetSliceFromItemR failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgGetSliceFromItemR failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgGetSliceFromItemR failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgGetSliceFromItemRResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - BrotherRootID
//  - CurrentSize
func (p *TBSGenericDataServiceClient) SplitBigSet(rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (r *TSplitBigSetResult_, err error) {
	if err = p.sendSplitBigSet(rootID, brotherRootID, currentSize); err != nil {
		return
	}
	return p.recvSplitBigSet()
}

func (p *TBSGenericDataServiceClient) sendSplitBigSet(rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("splitBigSet", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceSplitBigSetArgs{
		RootID:        rootID,
		BrotherRootID: brotherRootID,
		CurrentSize:   currentSize,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvSplitBigSet() (value *TSplitBigSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "splitBigSet" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "splitBigSet failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "splitBigSet failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "splitBigSet failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceSplitBigSetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - StartKey
//  - EndKey
func (p *TBSGenericDataServiceClient) BsgRangeQuery(rootID TContainerKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
	if err = p.sendBsgRangeQuery(rootID, startKey, endKey); err != nil {
		return
	}
	return p.recvBsgRangeQuery()
}

func (p *TBSGenericDataServiceClient) sendBsgRangeQuery(rootID TContainerKey, startKey TItemKey, endKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgRangeQuery", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgRangeQueryArgs{
		RootID:   rootID,
		StartKey: startKey,
		EndKey:   endKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgRangeQuery() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgRangeQuery" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgRangeQuery failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgRangeQuery failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgRangeQuery failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgRangeQueryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - SetData
func (p *TBSGenericDataServiceClient) BsgBulkLoad(rootID TContainerKey, setData *TItemSet) (r bool, err error) {
	if err = p.sendBsgBulkLoad(rootID, setData); err != nil {
		return
	}
	return p.recvBsgBulkLoad()
}

func (p *TBSGenericDataServiceClient) sendBsgBulkLoad(rootID TContainerKey, setData *TItemSet) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgBulkLoad", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgBulkLoadArgs{
		RootID:  rootID,
		SetData: setData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgBulkLoad() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgBulkLoad" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgBulkLoad failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgBulkLoad failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgBulkLoad failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgBulkLoadResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RootID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TBSGenericDataServiceClient) BsgMultiPut(rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
	if err = p.sendBsgMultiPut(rootID, setData, getAddedItems, getReplacedItems); err != nil {
		return
	}
	return p.recvBsgMultiPut()
}

func (p *TBSGenericDataServiceClient) sendBsgMultiPut(rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsgMultiPut", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceBsgMultiPutArgs{
		RootID:           rootID,
		SetData:          setData,
		GetAddedItems:    getAddedItems,
		GetReplacedItems: getReplacedItems,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvBsgMultiPut() (value *TMultiPutItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsgMultiPut" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsgMultiPut failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsgMultiPut failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsgMultiPut failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceBsgMultiPutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MetaID
func (p *TBSGenericDataServiceClient) GetSetGenData(metaID TMetaKey) (r *TBigSetGenericData, err error) {
	if err = p.sendGetSetGenData(metaID); err != nil {
		return
	}
	return p.recvGetSetGenData()
}

func (p *TBSGenericDataServiceClient) sendGetSetGenData(metaID TMetaKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSetGenData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceGetSetGenDataArgs{
		MetaID: metaID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvGetSetGenData() (value *TBigSetGenericData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSetGenData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSetGenData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSetGenData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSetGenData failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceGetSetGenDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MetaID
//  - Metadata
func (p *TBSGenericDataServiceClient) PutSetGenData(metaID TMetaKey, metadata *TBigSetGenericData) (err error) {
	if err = p.sendPutSetGenData(metaID, metadata); err != nil {
		return
	}
	return p.recvPutSetGenData()
}

func (p *TBSGenericDataServiceClient) sendPutSetGenData(metaID TMetaKey, metadata *TBigSetGenericData) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("putSetGenData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServicePutSetGenDataArgs{
		MetaID:   metaID,
		Metadata: metadata,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvPutSetGenData() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "putSetGenData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "putSetGenData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "putSetGenData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "putSetGenData failed: invalid message type")
		return
	}
	result := TBSGenericDataServicePutSetGenDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - MetaID
func (p *TBSGenericDataServiceClient) GetTotalCount(metaID TMetaKey) (r int64, err error) {
	if err = p.sendGetTotalCount(metaID); err != nil {
		return
	}
	return p.recvGetTotalCount()
}

func (p *TBSGenericDataServiceClient) sendGetTotalCount(metaID TMetaKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTotalCount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TBSGenericDataServiceGetTotalCountArgs{
		MetaID: metaID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TBSGenericDataServiceClient) recvGetTotalCount() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getTotalCount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getTotalCount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTotalCount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTotalCount failed: invalid message type")
		return
	}
	result := TBSGenericDataServiceGetTotalCountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type TBSGenericDataServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TBSGenericDataService
}

func (p *TBSGenericDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TBSGenericDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TBSGenericDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTBSGenericDataServiceProcessor(handler TBSGenericDataService) *TBSGenericDataServiceProcessor {

	self46 := &TBSGenericDataServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self46.processorMap["bsgPutItem"] = &tBSGenericDataServiceProcessorBsgPutItem{handler: handler}
	self46.processorMap["bsgRemoveItem"] = &tBSGenericDataServiceProcessorBsgRemoveItem{handler: handler}
	self46.processorMap["bsgExisted"] = &tBSGenericDataServiceProcessorBsgExisted{handler: handler}
	self46.processorMap["bsgGetItem"] = &tBSGenericDataServiceProcessorBsgGetItem{handler: handler}
	self46.processorMap["bsgGetSlice"] = &tBSGenericDataServiceProcessorBsgGetSlice{handler: handler}
	self46.processorMap["bsgGetSliceFromItem"] = &tBSGenericDataServiceProcessorBsgGetSliceFromItem{handler: handler}
	self46.processorMap["bsgGetSliceR"] = &tBSGenericDataServiceProcessorBsgGetSliceR{handler: handler}
	self46.processorMap["bsgGetSliceFromItemR"] = &tBSGenericDataServiceProcessorBsgGetSliceFromItemR{handler: handler}
	self46.processorMap["splitBigSet"] = &tBSGenericDataServiceProcessorSplitBigSet{handler: handler}
	self46.processorMap["bsgRangeQuery"] = &tBSGenericDataServiceProcessorBsgRangeQuery{handler: handler}
	self46.processorMap["bsgBulkLoad"] = &tBSGenericDataServiceProcessorBsgBulkLoad{handler: handler}
	self46.processorMap["bsgMultiPut"] = &tBSGenericDataServiceProcessorBsgMultiPut{handler: handler}
	self46.processorMap["getSetGenData"] = &tBSGenericDataServiceProcessorGetSetGenData{handler: handler}
	self46.processorMap["putSetGenData"] = &tBSGenericDataServiceProcessorPutSetGenData{handler: handler}
	self46.processorMap["getTotalCount"] = &tBSGenericDataServiceProcessorGetTotalCount{handler: handler}
	return self46
}

func (p *TBSGenericDataServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x47 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x47.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x47

}

type tBSGenericDataServiceProcessorBsgPutItem struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgPutItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgPutItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgPutItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgPutItemResult{}
	var retval *TPutItemResult_
	var err2 error
	if retval, err2 = p.handler.BsgPutItem(args.RootID, args.Item); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgPutItem: "+err2.Error())
		oprot.WriteMessageBegin("bsgPutItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgPutItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgRemoveItem struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgRemoveItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgRemoveItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgRemoveItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgRemoveItemResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.BsgRemoveItem(args.Key, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgRemoveItem: "+err2.Error())
		oprot.WriteMessageBegin("bsgRemoveItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("bsgRemoveItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgExisted struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgExisted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgExistedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgExisted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgExistedResult{}
	var retval *TExistedResult_
	var err2 error
	if retval, err2 = p.handler.BsgExisted(args.RootID, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgExisted: "+err2.Error())
		oprot.WriteMessageBegin("bsgExisted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgExisted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgGetItem struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgGetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgGetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgGetItemResult{}
	var retval *TItemResult_
	var err2 error
	if retval, err2 = p.handler.BsgGetItem(args.RootID, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetItem: "+err2.Error())
		oprot.WriteMessageBegin("bsgGetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgGetItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgGetSlice struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgGetSliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgGetSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgGetSliceResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsgGetSlice(args.RootID, args.FromIndex, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSlice: "+err2.Error())
		oprot.WriteMessageBegin("bsgGetSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgGetSlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceFromItem struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceFromItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgGetSliceFromItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgGetSliceFromItemResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsgGetSliceFromItem(args.RootID, args.FromKey, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceFromItem: "+err2.Error())
		oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceR struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceR) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgGetSliceRArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgGetSliceR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgGetSliceRResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsgGetSliceR(args.RootID, args.FromIndex, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceR: "+err2.Error())
		oprot.WriteMessageBegin("bsgGetSliceR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgGetSliceR", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceFromItemR struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceFromItemR) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgGetSliceFromItemRArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgGetSliceFromItemRResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsgGetSliceFromItemR(args.RootID, args.FromKey, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceFromItemR: "+err2.Error())
		oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorSplitBigSet struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorSplitBigSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceSplitBigSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("splitBigSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceSplitBigSetResult{}
	var retval *TSplitBigSetResult_
	var err2 error
	if retval, err2 = p.handler.SplitBigSet(args.RootID, args.BrotherRootID, args.CurrentSize); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitBigSet: "+err2.Error())
		oprot.WriteMessageBegin("splitBigSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("splitBigSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgRangeQuery struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgRangeQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgRangeQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgRangeQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgRangeQueryResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsgRangeQuery(args.RootID, args.StartKey, args.EndKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgRangeQuery: "+err2.Error())
		oprot.WriteMessageBegin("bsgRangeQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgRangeQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgBulkLoad struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgBulkLoad) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgBulkLoadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgBulkLoad", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgBulkLoadResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.BsgBulkLoad(args.RootID, args.SetData); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgBulkLoad: "+err2.Error())
		oprot.WriteMessageBegin("bsgBulkLoad", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("bsgBulkLoad", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorBsgMultiPut struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgMultiPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceBsgMultiPutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsgMultiPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceBsgMultiPutResult{}
	var retval *TMultiPutItemResult_
	var err2 error
	if retval, err2 = p.handler.BsgMultiPut(args.RootID, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgMultiPut: "+err2.Error())
		oprot.WriteMessageBegin("bsgMultiPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsgMultiPut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorGetSetGenData struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorGetSetGenData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceGetSetGenDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSetGenData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceGetSetGenDataResult{}
	var retval *TBigSetGenericData
	var err2 error
	if retval, err2 = p.handler.GetSetGenData(args.MetaID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSetGenData: "+err2.Error())
		oprot.WriteMessageBegin("getSetGenData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSetGenData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorPutSetGenData struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorPutSetGenData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServicePutSetGenDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("putSetGenData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServicePutSetGenDataResult{}
	var err2 error
	if err2 = p.handler.PutSetGenData(args.MetaID, args.Metadata); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putSetGenData: "+err2.Error())
		oprot.WriteMessageBegin("putSetGenData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("putSetGenData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tBSGenericDataServiceProcessorGetTotalCount struct {
	handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorGetTotalCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TBSGenericDataServiceGetTotalCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TBSGenericDataServiceGetTotalCountResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetTotalCount(args.MetaID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: "+err2.Error())
		oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RootID
//  - Item
type TBSGenericDataServiceBsgPutItemArgs struct {
	RootID TContainerKey `thrift:"rootID,1" json:"rootID"`
	Item   *TItem        `thrift:"item,2" json:"item"`
}

func NewTBSGenericDataServiceBsgPutItemArgs() *TBSGenericDataServiceBsgPutItemArgs {
	return &TBSGenericDataServiceBsgPutItemArgs{}
}

func (p *TBSGenericDataServiceBsgPutItemArgs) GetRootID() TContainerKey {
	return p.RootID
}

var TBSGenericDataServiceBsgPutItemArgs_Item_DEFAULT *TItem

func (p *TBSGenericDataServiceBsgPutItemArgs) GetItem() *TItem {
	if !p.IsSetItem() {
		return TBSGenericDataServiceBsgPutItemArgs_Item_DEFAULT
	}
	return p.Item
}
func (p *TBSGenericDataServiceBsgPutItemArgs) IsSetItem() bool {
	return p.Item != nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) readField2(iprot thrift.TProtocol) error {
	p.Item = &TItem{}
	if err := p.Item.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgPutItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgPutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err)
	}
	if err := p.Item.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgPutItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgPutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgPutItemResult struct {
	Success *TPutItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgPutItemResult() *TBSGenericDataServiceBsgPutItemResult {
	return &TBSGenericDataServiceBsgPutItemResult{}
}

var TBSGenericDataServiceBsgPutItemResult_Success_DEFAULT *TPutItemResult_

func (p *TBSGenericDataServiceBsgPutItemResult) GetSuccess() *TPutItemResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgPutItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgPutItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TPutItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgPutItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgPutItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgPutItemResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - ItemKey
type TBSGenericDataServiceBsgRemoveItemArgs struct {
	Key     TMetaKey `thrift:"key,1" json:"key"`
	ItemKey TItemKey `thrift:"itemKey,2" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgRemoveItemArgs() *TBSGenericDataServiceBsgRemoveItemArgs {
	return &TBSGenericDataServiceBsgRemoveItemArgs{}
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) GetKey() TMetaKey {
	return p.Key
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TBSGenericDataServiceBsgRemoveItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TMetaKey(v)
		p.Key = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgRemoveItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgRemoveItemResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgRemoveItemResult() *TBSGenericDataServiceBsgRemoveItemResult {
	return &TBSGenericDataServiceBsgRemoveItemResult{}
}

var TBSGenericDataServiceBsgRemoveItemResult_Success_DEFAULT bool

func (p *TBSGenericDataServiceBsgRemoveItemResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgRemoveItemResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TBSGenericDataServiceBsgRemoveItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgRemoveItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - ItemKey
type TBSGenericDataServiceBsgExistedArgs struct {
	RootID  TContainerKey `thrift:"rootID,1" json:"rootID"`
	ItemKey TItemKey      `thrift:"itemKey,2" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgExistedArgs() *TBSGenericDataServiceBsgExistedArgs {
	return &TBSGenericDataServiceBsgExistedArgs{}
}

func (p *TBSGenericDataServiceBsgExistedArgs) GetRootID() TContainerKey {
	return p.RootID
}

func (p *TBSGenericDataServiceBsgExistedArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TBSGenericDataServiceBsgExistedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgExisted_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgExistedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgExistedResult struct {
	Success *TExistedResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgExistedResult() *TBSGenericDataServiceBsgExistedResult {
	return &TBSGenericDataServiceBsgExistedResult{}
}

var TBSGenericDataServiceBsgExistedResult_Success_DEFAULT *TExistedResult_

func (p *TBSGenericDataServiceBsgExistedResult) GetSuccess() *TExistedResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgExistedResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgExistedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgExistedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgExistedResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TExistedResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgExistedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgExisted_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgExistedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgExistedResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - ItemKey
type TBSGenericDataServiceBsgGetItemArgs struct {
	RootID  TContainerKey `thrift:"rootID,1" json:"rootID"`
	ItemKey TItemKey      `thrift:"itemKey,2" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgGetItemArgs() *TBSGenericDataServiceBsgGetItemArgs {
	return &TBSGenericDataServiceBsgGetItemArgs{}
}

func (p *TBSGenericDataServiceBsgGetItemArgs) GetRootID() TContainerKey {
	return p.RootID
}

func (p *TBSGenericDataServiceBsgGetItemArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TBSGenericDataServiceBsgGetItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetItemResult struct {
	Success *TItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetItemResult() *TBSGenericDataServiceBsgGetItemResult {
	return &TBSGenericDataServiceBsgGetItemResult{}
}

var TBSGenericDataServiceBsgGetItemResult_Success_DEFAULT *TItemResult_

func (p *TBSGenericDataServiceBsgGetItemResult) GetSuccess() *TItemResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgGetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgGetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromIndex
//  - Count
type TBSGenericDataServiceBsgGetSliceArgs struct {
	RootID    TContainerKey `thrift:"rootID,1" json:"rootID"`
	FromIndex int32         `thrift:"fromIndex,2" json:"fromIndex"`
	Count     int32         `thrift:"count,3" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceArgs() *TBSGenericDataServiceBsgGetSliceArgs {
	return &TBSGenericDataServiceBsgGetSliceArgs{}
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) GetRootID() TContainerKey {
	return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) GetFromIndex() int32 {
	return p.FromIndex
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) GetCount() int32 {
	return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FromIndex = v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetSlice_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromIndex", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromIndex (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIndex: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceResult() *TBSGenericDataServiceBsgGetSliceResult {
	return &TBSGenericDataServiceBsgGetSliceResult{}
}

var TBSGenericDataServiceBsgGetSliceResult_Success_DEFAULT *TItemSetResult_

func (p *TBSGenericDataServiceBsgGetSliceResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgGetSliceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetSlice_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromKey
//  - Count
type TBSGenericDataServiceBsgGetSliceFromItemArgs struct {
	RootID  TContainerKey `thrift:"rootID,1" json:"rootID"`
	FromKey TItemKey      `thrift:"fromKey,2" json:"fromKey"`
	Count   int32         `thrift:"count,3" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemArgs() *TBSGenericDataServiceBsgGetSliceFromItemArgs {
	return &TBSGenericDataServiceBsgGetSliceFromItemArgs{}
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetRootID() TContainerKey {
	return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetFromKey() TItemKey {
	return p.FromKey
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetCount() int32 {
	return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.FromKey = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetSliceFromItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.FromKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceFromItemResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemResult() *TBSGenericDataServiceBsgGetSliceFromItemResult {
	return &TBSGenericDataServiceBsgGetSliceFromItemResult{}
}

var TBSGenericDataServiceBsgGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgGetSliceFromItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetSliceFromItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromIndex
//  - Count
type TBSGenericDataServiceBsgGetSliceRArgs struct {
	RootID    TContainerKey `thrift:"rootID,1" json:"rootID"`
	FromIndex int32         `thrift:"fromIndex,2" json:"fromIndex"`
	Count     int32         `thrift:"count,3" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceRArgs() *TBSGenericDataServiceBsgGetSliceRArgs {
	return &TBSGenericDataServiceBsgGetSliceRArgs{}
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetRootID() TContainerKey {
	return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetFromIndex() int32 {
	return p.FromIndex
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetCount() int32 {
	return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceRArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FromIndex = v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetSliceR_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromIndex", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromIndex (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIndex: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceRResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceRResult() *TBSGenericDataServiceBsgGetSliceRResult {
	return &TBSGenericDataServiceBsgGetSliceRResult{}
}

var TBSGenericDataServiceBsgGetSliceRResult_Success_DEFAULT *TItemSetResult_

func (p *TBSGenericDataServiceBsgGetSliceRResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgGetSliceRResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetSliceR_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromKey
//  - Count
type TBSGenericDataServiceBsgGetSliceFromItemRArgs struct {
	RootID  TContainerKey `thrift:"rootID,1" json:"rootID"`
	FromKey TItemKey      `thrift:"fromKey,2" json:"fromKey"`
	Count   int32         `thrift:"count,3" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemRArgs() *TBSGenericDataServiceBsgGetSliceFromItemRArgs {
	return &TBSGenericDataServiceBsgGetSliceFromItemRArgs{}
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetRootID() TContainerKey {
	return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetFromKey() TItemKey {
	return p.FromKey
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetCount() int32 {
	return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.FromKey = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetSliceFromItemR_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.FromKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceFromItemRResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemRResult() *TBSGenericDataServiceBsgGetSliceFromItemRResult {
	return &TBSGenericDataServiceBsgGetSliceFromItemRResult{}
}

var TBSGenericDataServiceBsgGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgGetSliceFromItemRResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgGetSliceFromItemR_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - BrotherRootID
//  - CurrentSize
type TBSGenericDataServiceSplitBigSetArgs struct {
	RootID        TContainerKey `thrift:"rootID,1" json:"rootID"`
	BrotherRootID TContainerKey `thrift:"brotherRootID,2" json:"brotherRootID"`
	CurrentSize   int64         `thrift:"currentSize,3" json:"currentSize"`
}

func NewTBSGenericDataServiceSplitBigSetArgs() *TBSGenericDataServiceSplitBigSetArgs {
	return &TBSGenericDataServiceSplitBigSetArgs{}
}

func (p *TBSGenericDataServiceSplitBigSetArgs) GetRootID() TContainerKey {
	return p.RootID
}

func (p *TBSGenericDataServiceSplitBigSetArgs) GetBrotherRootID() TContainerKey {
	return p.BrotherRootID
}

func (p *TBSGenericDataServiceSplitBigSetArgs) GetCurrentSize() int64 {
	return p.CurrentSize
}
func (p *TBSGenericDataServiceSplitBigSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TContainerKey(v)
		p.BrotherRootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CurrentSize = v
	}
	return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("splitBigSet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("brotherRootID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:brotherRootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BrotherRootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.brotherRootID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:brotherRootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentSize", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currentSize: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CurrentSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentSize (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currentSize: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceSplitBigSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceSplitBigSetResult struct {
	Success *TSplitBigSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceSplitBigSetResult() *TBSGenericDataServiceSplitBigSetResult {
	return &TBSGenericDataServiceSplitBigSetResult{}
}

var TBSGenericDataServiceSplitBigSetResult_Success_DEFAULT *TSplitBigSetResult_

func (p *TBSGenericDataServiceSplitBigSetResult) GetSuccess() *TSplitBigSetResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceSplitBigSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceSplitBigSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TSplitBigSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("splitBigSet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceSplitBigSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceSplitBigSetResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - StartKey
//  - EndKey
type TBSGenericDataServiceBsgRangeQueryArgs struct {
	RootID   TContainerKey `thrift:"rootID,1" json:"rootID"`
	StartKey TItemKey      `thrift:"startKey,2" json:"startKey"`
	EndKey   TItemKey      `thrift:"endKey,3" json:"endKey"`
}

func NewTBSGenericDataServiceBsgRangeQueryArgs() *TBSGenericDataServiceBsgRangeQueryArgs {
	return &TBSGenericDataServiceBsgRangeQueryArgs{}
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetRootID() TContainerKey {
	return p.RootID
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetStartKey() TItemKey {
	return p.StartKey
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetEndKey() TItemKey {
	return p.EndKey
}
func (p *TBSGenericDataServiceBsgRangeQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.StartKey = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TItemKey(v)
		p.EndKey = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgRangeQuery_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgRangeQueryResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgRangeQueryResult() *TBSGenericDataServiceBsgRangeQueryResult {
	return &TBSGenericDataServiceBsgRangeQueryResult{}
}

var TBSGenericDataServiceBsgRangeQueryResult_Success_DEFAULT *TItemSetResult_

func (p *TBSGenericDataServiceBsgRangeQueryResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgRangeQueryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgRangeQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgRangeQuery_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SetData
type TBSGenericDataServiceBsgBulkLoadArgs struct {
	RootID  TContainerKey `thrift:"rootID,1" json:"rootID"`
	SetData *TItemSet     `thrift:"setData,2" json:"setData"`
}

func NewTBSGenericDataServiceBsgBulkLoadArgs() *TBSGenericDataServiceBsgBulkLoadArgs {
	return &TBSGenericDataServiceBsgBulkLoadArgs{}
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) GetRootID() TContainerKey {
	return p.RootID
}

var TBSGenericDataServiceBsgBulkLoadArgs_SetData_DEFAULT *TItemSet

func (p *TBSGenericDataServiceBsgBulkLoadArgs) GetSetData() *TItemSet {
	if !p.IsSetSetData() {
		return TBSGenericDataServiceBsgBulkLoadArgs_SetData_DEFAULT
	}
	return p.SetData
}
func (p *TBSGenericDataServiceBsgBulkLoadArgs) IsSetSetData() bool {
	return p.SetData != nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) readField2(iprot thrift.TProtocol) error {
	p.SetData = &TItemSet{}
	if err := p.SetData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgBulkLoad_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err)
	}
	if err := p.SetData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgBulkLoadResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgBulkLoadResult() *TBSGenericDataServiceBsgBulkLoadResult {
	return &TBSGenericDataServiceBsgBulkLoadResult{}
}

var TBSGenericDataServiceBsgBulkLoadResult_Success_DEFAULT bool

func (p *TBSGenericDataServiceBsgBulkLoadResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgBulkLoadResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TBSGenericDataServiceBsgBulkLoadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgBulkLoad_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TBSGenericDataServiceBsgMultiPutArgs struct {
	RootID           TContainerKey `thrift:"rootID,1" json:"rootID"`
	SetData          *TItemSet     `thrift:"setData,2" json:"setData"`
	GetAddedItems    bool          `thrift:"getAddedItems,3" json:"getAddedItems"`
	GetReplacedItems bool          `thrift:"getReplacedItems,4" json:"getReplacedItems"`
}

func NewTBSGenericDataServiceBsgMultiPutArgs() *TBSGenericDataServiceBsgMultiPutArgs {
	return &TBSGenericDataServiceBsgMultiPutArgs{}
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) GetRootID() TContainerKey {
	return p.RootID
}

var TBSGenericDataServiceBsgMultiPutArgs_SetData_DEFAULT *TItemSet

func (p *TBSGenericDataServiceBsgMultiPutArgs) GetSetData() *TItemSet {
	if !p.IsSetSetData() {
		return TBSGenericDataServiceBsgMultiPutArgs_SetData_DEFAULT
	}
	return p.SetData
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) GetGetAddedItems() bool {
	return p.GetAddedItems
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) GetGetReplacedItems() bool {
	return p.GetReplacedItems
}
func (p *TBSGenericDataServiceBsgMultiPutArgs) IsSetSetData() bool {
	return p.SetData != nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) readField2(iprot thrift.TProtocol) error {
	p.SetData = &TItemSet{}
	if err := p.SetData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GetAddedItems = v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GetReplacedItems = v
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgMultiPut_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err)
	}
	if err := p.SetData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgMultiPutResult struct {
	Success *TMultiPutItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgMultiPutResult() *TBSGenericDataServiceBsgMultiPutResult {
	return &TBSGenericDataServiceBsgMultiPutResult{}
}

var TBSGenericDataServiceBsgMultiPutResult_Success_DEFAULT *TMultiPutItemResult_

func (p *TBSGenericDataServiceBsgMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceBsgMultiPutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceBsgMultiPutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TMultiPutItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsgMultiPut_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceBsgMultiPutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceBsgMultiPutResult(%+v)", *p)
}

// Attributes:
//  - MetaID
type TBSGenericDataServiceGetSetGenDataArgs struct {
	MetaID TMetaKey `thrift:"metaID,1" json:"metaID"`
}

func NewTBSGenericDataServiceGetSetGenDataArgs() *TBSGenericDataServiceGetSetGenDataArgs {
	return &TBSGenericDataServiceGetSetGenDataArgs{}
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) GetMetaID() TMetaKey {
	return p.MetaID
}
func (p *TBSGenericDataServiceGetSetGenDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TMetaKey(v)
		p.MetaID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSetGenData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceGetSetGenDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceGetSetGenDataResult struct {
	Success *TBigSetGenericData `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceGetSetGenDataResult() *TBSGenericDataServiceGetSetGenDataResult {
	return &TBSGenericDataServiceGetSetGenDataResult{}
}

var TBSGenericDataServiceGetSetGenDataResult_Success_DEFAULT *TBigSetGenericData

func (p *TBSGenericDataServiceGetSetGenDataResult) GetSuccess() *TBigSetGenericData {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceGetSetGenDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TBSGenericDataServiceGetSetGenDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TBigSetGenericData{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSetGenData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceGetSetGenDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceGetSetGenDataResult(%+v)", *p)
}

// Attributes:
//  - MetaID
//  - Metadata
type TBSGenericDataServicePutSetGenDataArgs struct {
	MetaID   TMetaKey            `thrift:"metaID,1" json:"metaID"`
	Metadata *TBigSetGenericData `thrift:"metadata,2" json:"metadata"`
}

func NewTBSGenericDataServicePutSetGenDataArgs() *TBSGenericDataServicePutSetGenDataArgs {
	return &TBSGenericDataServicePutSetGenDataArgs{}
}

func (p *TBSGenericDataServicePutSetGenDataArgs) GetMetaID() TMetaKey {
	return p.MetaID
}

var TBSGenericDataServicePutSetGenDataArgs_Metadata_DEFAULT *TBigSetGenericData

func (p *TBSGenericDataServicePutSetGenDataArgs) GetMetadata() *TBigSetGenericData {
	if !p.IsSetMetadata() {
		return TBSGenericDataServicePutSetGenDataArgs_Metadata_DEFAULT
	}
	return p.Metadata
}
func (p *TBSGenericDataServicePutSetGenDataArgs) IsSetMetadata() bool {
	return p.Metadata != nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TMetaKey(v)
		p.MetaID = temp
	}
	return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) readField2(iprot thrift.TProtocol) error {
	p.Metadata = &TBigSetGenericData{}
	if err := p.Metadata.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
	}
	return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putSetGenData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServicePutSetGenDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err)
	}
	if err := p.Metadata.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServicePutSetGenDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServicePutSetGenDataArgs(%+v)", *p)
}

type TBSGenericDataServicePutSetGenDataResult struct {
}

func NewTBSGenericDataServicePutSetGenDataResult() *TBSGenericDataServicePutSetGenDataResult {
	return &TBSGenericDataServicePutSetGenDataResult{}
}

func (p *TBSGenericDataServicePutSetGenDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServicePutSetGenDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putSetGenData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServicePutSetGenDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServicePutSetGenDataResult(%+v)", *p)
}

// Attributes:
//  - MetaID
type TBSGenericDataServiceGetTotalCountArgs struct {
	MetaID TMetaKey `thrift:"metaID,1" json:"metaID"`
}

func NewTBSGenericDataServiceGetTotalCountArgs() *TBSGenericDataServiceGetTotalCountArgs {
	return &TBSGenericDataServiceGetTotalCountArgs{}
}

func (p *TBSGenericDataServiceGetTotalCountArgs) GetMetaID() TMetaKey {
	return p.MetaID
}
func (p *TBSGenericDataServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TMetaKey(v)
		p.MetaID = temp
	}
	return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err)
	}
	return err
}

func (p *TBSGenericDataServiceGetTotalCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceGetTotalCountResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTBSGenericDataServiceGetTotalCountResult() *TBSGenericDataServiceGetTotalCountResult {
	return &TBSGenericDataServiceGetTotalCountResult{}
}

var TBSGenericDataServiceGetTotalCountResult_Success_DEFAULT int64

func (p *TBSGenericDataServiceGetTotalCountResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TBSGenericDataServiceGetTotalCountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TBSGenericDataServiceGetTotalCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TBSGenericDataServiceGetTotalCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBSGenericDataServiceGetTotalCountResult(%+v)", *p)
}
