// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generic

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TIBSDataService interface {
	// Parameters:
	//  - BigsetID
	//  - Item
	PutItem(bigsetID TKey, item *TItem) (r *TPutItemResult_, err error)
	// Parameters:
	//  - BigsetID
	//  - ItemKey
	RemoveItem(bigsetID TKey, itemKey TItemKey) (r bool, err error)
	// Parameters:
	//  - BigsetID
	//  - ItemKey
	Existed(bigsetID TKey, itemKey TItemKey) (r *TExistedResult_, err error)
	// Parameters:
	//  - BigsetID
	//  - ItemKey
	GetItem(bigsetID TKey, itemKey TItemKey) (r *TItemResult_, err error)
	// Parameters:
	//  - BigsetID
	//  - FromIndex
	//  - Count
	GetSlice(bigsetID TKey, fromIndex int32, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BigsetID
	//  - FromKey
	//  - Count
	GetSliceFromItem(bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BigsetID
	//  - FromIndex
	//  - Count
	GetSliceR(bigsetID TKey, fromIndex int32, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BigsetID
	//  - FromKey
	//  - Count
	GetSliceFromItemR(bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BigsetID
	//  - StartKey
	//  - EndKey
	RangeQuery(bigsetID TKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BigsetID
	//  - SetData
	BulkLoad(bigsetID TKey, setData *TItemSet) (r bool, err error)
	// Parameters:
	//  - BigsetID
	//  - SetData
	//  - GetAddedItems
	//  - GetReplacedItems
	MultiPut(bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
	// Parameters:
	//  - BigsetID
	GetTotalCount(bigsetID TKey) (r int64, err error)
}

type TIBSDataServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTIBSDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TIBSDataServiceClient {
	return &TIBSDataServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTIBSDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TIBSDataServiceClient {
	return &TIBSDataServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - BigsetID
//  - Item
func (p *TIBSDataServiceClient) PutItem(bigsetID TKey, item *TItem) (r *TPutItemResult_, err error) {
	if err = p.sendPutItem(bigsetID, item); err != nil {
		return
	}
	return p.recvPutItem()
}

func (p *TIBSDataServiceClient) sendPutItem(bigsetID TKey, item *TItem) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("putItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServicePutItemArgs{
		BigsetID: bigsetID,
		Item:     item,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvPutItem() (value *TPutItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "putItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "putItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "putItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error185 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error186 error
		error186, err = error185.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error186
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "putItem failed: invalid message type")
		return
	}
	result := TIBSDataServicePutItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) RemoveItem(bigsetID TKey, itemKey TItemKey) (r bool, err error) {
	if err = p.sendRemoveItem(bigsetID, itemKey); err != nil {
		return
	}
	return p.recvRemoveItem()
}

func (p *TIBSDataServiceClient) sendRemoveItem(bigsetID TKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceRemoveItemArgs{
		BigsetID: bigsetID,
		ItemKey:  itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvRemoveItem() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error187 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error188 error
		error188, err = error187.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error188
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeItem failed: invalid message type")
		return
	}
	result := TIBSDataServiceRemoveItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) Existed(bigsetID TKey, itemKey TItemKey) (r *TExistedResult_, err error) {
	if err = p.sendExisted(bigsetID, itemKey); err != nil {
		return
	}
	return p.recvExisted()
}

func (p *TIBSDataServiceClient) sendExisted(bigsetID TKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("existed", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceExistedArgs{
		BigsetID: bigsetID,
		ItemKey:  itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvExisted() (value *TExistedResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "existed" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "existed failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "existed failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error189 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error190 error
		error190, err = error189.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error190
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "existed failed: invalid message type")
		return
	}
	result := TIBSDataServiceExistedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) GetItem(bigsetID TKey, itemKey TItemKey) (r *TItemResult_, err error) {
	if err = p.sendGetItem(bigsetID, itemKey); err != nil {
		return
	}
	return p.recvGetItem()
}

func (p *TIBSDataServiceClient) sendGetItem(bigsetID TKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceGetItemArgs{
		BigsetID: bigsetID,
		ItemKey:  itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvGetItem() (value *TItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error191 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error192 error
		error192, err = error191.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error192
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getItem failed: invalid message type")
		return
	}
	result := TIBSDataServiceGetItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - FromIndex
//  - Count
func (p *TIBSDataServiceClient) GetSlice(bigsetID TKey, fromIndex int32, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendGetSlice(bigsetID, fromIndex, count); err != nil {
		return
	}
	return p.recvGetSlice()
}

func (p *TIBSDataServiceClient) sendGetSlice(bigsetID TKey, fromIndex int32, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSlice", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceGetSliceArgs{
		BigsetID:  bigsetID,
		FromIndex: fromIndex,
		Count:     count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvGetSlice() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSlice" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSlice failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSlice failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error193 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error194 error
		error194, err = error193.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error194
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSlice failed: invalid message type")
		return
	}
	result := TIBSDataServiceGetSliceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - FromKey
//  - Count
func (p *TIBSDataServiceClient) GetSliceFromItem(bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendGetSliceFromItem(bigsetID, fromKey, count); err != nil {
		return
	}
	return p.recvGetSliceFromItem()
}

func (p *TIBSDataServiceClient) sendGetSliceFromItem(bigsetID TKey, fromKey TItemKey, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSliceFromItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceGetSliceFromItemArgs{
		BigsetID: bigsetID,
		FromKey:  fromKey,
		Count:    count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvGetSliceFromItem() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSliceFromItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSliceFromItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSliceFromItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error195 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error196 error
		error196, err = error195.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error196
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSliceFromItem failed: invalid message type")
		return
	}
	result := TIBSDataServiceGetSliceFromItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - FromIndex
//  - Count
func (p *TIBSDataServiceClient) GetSliceR(bigsetID TKey, fromIndex int32, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendGetSliceR(bigsetID, fromIndex, count); err != nil {
		return
	}
	return p.recvGetSliceR()
}

func (p *TIBSDataServiceClient) sendGetSliceR(bigsetID TKey, fromIndex int32, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSliceR", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceGetSliceRArgs{
		BigsetID:  bigsetID,
		FromIndex: fromIndex,
		Count:     count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvGetSliceR() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSliceR" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSliceR failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSliceR failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error197 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error198 error
		error198, err = error197.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error198
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSliceR failed: invalid message type")
		return
	}
	result := TIBSDataServiceGetSliceRResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - FromKey
//  - Count
func (p *TIBSDataServiceClient) GetSliceFromItemR(bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendGetSliceFromItemR(bigsetID, fromKey, count); err != nil {
		return
	}
	return p.recvGetSliceFromItemR()
}

func (p *TIBSDataServiceClient) sendGetSliceFromItemR(bigsetID TKey, fromKey TItemKey, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSliceFromItemR", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceGetSliceFromItemRArgs{
		BigsetID: bigsetID,
		FromKey:  fromKey,
		Count:    count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvGetSliceFromItemR() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSliceFromItemR" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSliceFromItemR failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSliceFromItemR failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error199 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error200 error
		error200, err = error199.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error200
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSliceFromItemR failed: invalid message type")
		return
	}
	result := TIBSDataServiceGetSliceFromItemRResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - StartKey
//  - EndKey
func (p *TIBSDataServiceClient) RangeQuery(bigsetID TKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
	if err = p.sendRangeQuery(bigsetID, startKey, endKey); err != nil {
		return
	}
	return p.recvRangeQuery()
}

func (p *TIBSDataServiceClient) sendRangeQuery(bigsetID TKey, startKey TItemKey, endKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rangeQuery", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceRangeQueryArgs{
		BigsetID: bigsetID,
		StartKey: startKey,
		EndKey:   endKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvRangeQuery() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rangeQuery" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rangeQuery failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rangeQuery failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error201 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error202 error
		error202, err = error201.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error202
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rangeQuery failed: invalid message type")
		return
	}
	result := TIBSDataServiceRangeQueryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - SetData
func (p *TIBSDataServiceClient) BulkLoad(bigsetID TKey, setData *TItemSet) (r bool, err error) {
	if err = p.sendBulkLoad(bigsetID, setData); err != nil {
		return
	}
	return p.recvBulkLoad()
}

func (p *TIBSDataServiceClient) sendBulkLoad(bigsetID TKey, setData *TItemSet) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bulkLoad", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceBulkLoadArgs{
		BigsetID: bigsetID,
		SetData:  setData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvBulkLoad() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bulkLoad" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bulkLoad failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bulkLoad failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error203 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error204 error
		error204, err = error203.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error204
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bulkLoad failed: invalid message type")
		return
	}
	result := TIBSDataServiceBulkLoadResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TIBSDataServiceClient) MultiPut(bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
	if err = p.sendMultiPut(bigsetID, setData, getAddedItems, getReplacedItems); err != nil {
		return
	}
	return p.recvMultiPut()
}

func (p *TIBSDataServiceClient) sendMultiPut(bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("multiPut", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceMultiPutArgs{
		BigsetID:         bigsetID,
		SetData:          setData,
		GetAddedItems:    getAddedItems,
		GetReplacedItems: getReplacedItems,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvMultiPut() (value *TMultiPutItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "multiPut" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "multiPut failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "multiPut failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error205 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error206 error
		error206, err = error205.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error206
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiPut failed: invalid message type")
		return
	}
	result := TIBSDataServiceMultiPutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BigsetID
func (p *TIBSDataServiceClient) GetTotalCount(bigsetID TKey) (r int64, err error) {
	if err = p.sendGetTotalCount(bigsetID); err != nil {
		return
	}
	return p.recvGetTotalCount()
}

func (p *TIBSDataServiceClient) sendGetTotalCount(bigsetID TKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTotalCount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TIBSDataServiceGetTotalCountArgs{
		BigsetID: bigsetID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TIBSDataServiceClient) recvGetTotalCount() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getTotalCount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getTotalCount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTotalCount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error207 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error208 error
		error208, err = error207.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error208
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTotalCount failed: invalid message type")
		return
	}
	result := TIBSDataServiceGetTotalCountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type TIBSDataServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TIBSDataService
}

func (p *TIBSDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TIBSDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TIBSDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTIBSDataServiceProcessor(handler TIBSDataService) *TIBSDataServiceProcessor {

	self209 := &TIBSDataServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self209.processorMap["putItem"] = &tIBSDataServiceProcessorPutItem{handler: handler}
	self209.processorMap["removeItem"] = &tIBSDataServiceProcessorRemoveItem{handler: handler}
	self209.processorMap["existed"] = &tIBSDataServiceProcessorExisted{handler: handler}
	self209.processorMap["getItem"] = &tIBSDataServiceProcessorGetItem{handler: handler}
	self209.processorMap["getSlice"] = &tIBSDataServiceProcessorGetSlice{handler: handler}
	self209.processorMap["getSliceFromItem"] = &tIBSDataServiceProcessorGetSliceFromItem{handler: handler}
	self209.processorMap["getSliceR"] = &tIBSDataServiceProcessorGetSliceR{handler: handler}
	self209.processorMap["getSliceFromItemR"] = &tIBSDataServiceProcessorGetSliceFromItemR{handler: handler}
	self209.processorMap["rangeQuery"] = &tIBSDataServiceProcessorRangeQuery{handler: handler}
	self209.processorMap["bulkLoad"] = &tIBSDataServiceProcessorBulkLoad{handler: handler}
	self209.processorMap["multiPut"] = &tIBSDataServiceProcessorMultiPut{handler: handler}
	self209.processorMap["getTotalCount"] = &tIBSDataServiceProcessorGetTotalCount{handler: handler}
	return self209
}

func (p *TIBSDataServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x210 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x210.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x210

}

type tIBSDataServiceProcessorPutItem struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorPutItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServicePutItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("putItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServicePutItemResult{}
	var retval *TPutItemResult_
	var err2 error
	if retval, err2 = p.handler.PutItem(args.BigsetID, args.Item); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putItem: "+err2.Error())
		oprot.WriteMessageBegin("putItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("putItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorRemoveItem struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorRemoveItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceRemoveItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceRemoveItemResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RemoveItem(args.BigsetID, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeItem: "+err2.Error())
		oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("removeItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorExisted struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorExisted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceExistedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("existed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceExistedResult{}
	var retval *TExistedResult_
	var err2 error
	if retval, err2 = p.handler.Existed(args.BigsetID, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing existed: "+err2.Error())
		oprot.WriteMessageBegin("existed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("existed", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorGetItem struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceGetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceGetItemResult{}
	var retval *TItemResult_
	var err2 error
	if retval, err2 = p.handler.GetItem(args.BigsetID, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItem: "+err2.Error())
		oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorGetSlice struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceGetSliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceGetSliceResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.GetSlice(args.BigsetID, args.FromIndex, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSlice: "+err2.Error())
		oprot.WriteMessageBegin("getSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorGetSliceFromItem struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceFromItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceGetSliceFromItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSliceFromItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceGetSliceFromItemResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.GetSliceFromItem(args.BigsetID, args.FromKey, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceFromItem: "+err2.Error())
		oprot.WriteMessageBegin("getSliceFromItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSliceFromItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorGetSliceR struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceR) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceGetSliceRArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSliceR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceGetSliceRResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.GetSliceR(args.BigsetID, args.FromIndex, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceR: "+err2.Error())
		oprot.WriteMessageBegin("getSliceR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSliceR", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorGetSliceFromItemR struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceFromItemR) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceGetSliceFromItemRArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSliceFromItemR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceGetSliceFromItemRResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.GetSliceFromItemR(args.BigsetID, args.FromKey, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceFromItemR: "+err2.Error())
		oprot.WriteMessageBegin("getSliceFromItemR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorRangeQuery struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorRangeQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceRangeQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rangeQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceRangeQueryResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.RangeQuery(args.BigsetID, args.StartKey, args.EndKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rangeQuery: "+err2.Error())
		oprot.WriteMessageBegin("rangeQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rangeQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorBulkLoad struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorBulkLoad) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceBulkLoadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bulkLoad", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceBulkLoadResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.BulkLoad(args.BigsetID, args.SetData); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bulkLoad: "+err2.Error())
		oprot.WriteMessageBegin("bulkLoad", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("bulkLoad", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorMultiPut struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorMultiPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceMultiPutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("multiPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceMultiPutResult{}
	var retval *TMultiPutItemResult_
	var err2 error
	if retval, err2 = p.handler.MultiPut(args.BigsetID, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiPut: "+err2.Error())
		oprot.WriteMessageBegin("multiPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("multiPut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tIBSDataServiceProcessorGetTotalCount struct {
	handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetTotalCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TIBSDataServiceGetTotalCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TIBSDataServiceGetTotalCountResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetTotalCount(args.BigsetID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: "+err2.Error())
		oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BigsetID
//  - Item
type TIBSDataServicePutItemArgs struct {
	BigsetID TKey   `thrift:"bigsetID,1" json:"bigsetID"`
	Item     *TItem `thrift:"item,2" json:"item"`
}

func NewTIBSDataServicePutItemArgs() *TIBSDataServicePutItemArgs {
	return &TIBSDataServicePutItemArgs{}
}

func (p *TIBSDataServicePutItemArgs) GetBigsetID() TKey {
	return p.BigsetID
}

var TIBSDataServicePutItemArgs_Item_DEFAULT *TItem

func (p *TIBSDataServicePutItemArgs) GetItem() *TItem {
	if !p.IsSetItem() {
		return TIBSDataServicePutItemArgs_Item_DEFAULT
	}
	return p.Item
}
func (p *TIBSDataServicePutItemArgs) IsSetItem() bool {
	return p.Item != nil
}

func (p *TIBSDataServicePutItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServicePutItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServicePutItemArgs) readField2(iprot thrift.TProtocol) error {
	p.Item = &TItem{}
	if err := p.Item.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
	}
	return nil
}

func (p *TIBSDataServicePutItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServicePutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServicePutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err)
	}
	if err := p.Item.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err)
	}
	return err
}

func (p *TIBSDataServicePutItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServicePutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServicePutItemResult struct {
	Success *TPutItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServicePutItemResult() *TIBSDataServicePutItemResult {
	return &TIBSDataServicePutItemResult{}
}

var TIBSDataServicePutItemResult_Success_DEFAULT *TPutItemResult_

func (p *TIBSDataServicePutItemResult) GetSuccess() *TPutItemResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServicePutItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServicePutItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServicePutItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServicePutItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TPutItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServicePutItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServicePutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServicePutItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServicePutItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceRemoveItemArgs struct {
	BigsetID TKey     `thrift:"bigsetID,1" json:"bigsetID"`
	ItemKey  TItemKey `thrift:"itemKey,2" json:"itemKey"`
}

func NewTIBSDataServiceRemoveItemArgs() *TIBSDataServiceRemoveItemArgs {
	return &TIBSDataServiceRemoveItemArgs{}
}

func (p *TIBSDataServiceRemoveItemArgs) GetBigsetID() TKey {
	return p.BigsetID
}

func (p *TIBSDataServiceRemoveItemArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TIBSDataServiceRemoveItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceRemoveItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceRemoveItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TIBSDataServiceRemoveItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceRemoveItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceRemoveItemResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceRemoveItemResult() *TIBSDataServiceRemoveItemResult {
	return &TIBSDataServiceRemoveItemResult{}
}

var TIBSDataServiceRemoveItemResult_Success_DEFAULT bool

func (p *TIBSDataServiceRemoveItemResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TIBSDataServiceRemoveItemResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TIBSDataServiceRemoveItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceRemoveItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceRemoveItemResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TIBSDataServiceRemoveItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceRemoveItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceExistedArgs struct {
	BigsetID TKey     `thrift:"bigsetID,1" json:"bigsetID"`
	ItemKey  TItemKey `thrift:"itemKey,2" json:"itemKey"`
}

func NewTIBSDataServiceExistedArgs() *TIBSDataServiceExistedArgs {
	return &TIBSDataServiceExistedArgs{}
}

func (p *TIBSDataServiceExistedArgs) GetBigsetID() TKey {
	return p.BigsetID
}

func (p *TIBSDataServiceExistedArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TIBSDataServiceExistedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceExistedArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceExistedArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TIBSDataServiceExistedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("existed_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceExistedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceExistedResult struct {
	Success *TExistedResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceExistedResult() *TIBSDataServiceExistedResult {
	return &TIBSDataServiceExistedResult{}
}

var TIBSDataServiceExistedResult_Success_DEFAULT *TExistedResult_

func (p *TIBSDataServiceExistedResult) GetSuccess() *TExistedResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServiceExistedResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServiceExistedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceExistedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceExistedResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TExistedResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServiceExistedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("existed_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceExistedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceExistedResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceGetItemArgs struct {
	BigsetID TKey     `thrift:"bigsetID,1" json:"bigsetID"`
	ItemKey  TItemKey `thrift:"itemKey,2" json:"itemKey"`
}

func NewTIBSDataServiceGetItemArgs() *TIBSDataServiceGetItemArgs {
	return &TIBSDataServiceGetItemArgs{}
}

func (p *TIBSDataServiceGetItemArgs) GetBigsetID() TKey {
	return p.BigsetID
}

func (p *TIBSDataServiceGetItemArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TIBSDataServiceGetItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceGetItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TIBSDataServiceGetItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetItemResult struct {
	Success *TItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceGetItemResult() *TIBSDataServiceGetItemResult {
	return &TIBSDataServiceGetItemResult{}
}

var TIBSDataServiceGetItemResult_Success_DEFAULT *TItemResult_

func (p *TIBSDataServiceGetItemResult) GetSuccess() *TItemResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServiceGetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServiceGetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceGetItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServiceGetItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceGetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromIndex
//  - Count
type TIBSDataServiceGetSliceArgs struct {
	BigsetID  TKey  `thrift:"bigsetID,1" json:"bigsetID"`
	FromIndex int32 `thrift:"fromIndex,2" json:"fromIndex"`
	Count     int32 `thrift:"count,3" json:"count"`
}

func NewTIBSDataServiceGetSliceArgs() *TIBSDataServiceGetSliceArgs {
	return &TIBSDataServiceGetSliceArgs{}
}

func (p *TIBSDataServiceGetSliceArgs) GetBigsetID() TKey {
	return p.BigsetID
}

func (p *TIBSDataServiceGetSliceArgs) GetFromIndex() int32 {
	return p.FromIndex
}

func (p *TIBSDataServiceGetSliceArgs) GetCount() int32 {
	return p.Count
}
func (p *TIBSDataServiceGetSliceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceGetSliceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FromIndex = v
	}
	return nil
}

func (p *TIBSDataServiceGetSliceArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TIBSDataServiceGetSliceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSlice_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromIndex", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromIndex (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIndex: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceResult() *TIBSDataServiceGetSliceResult {
	return &TIBSDataServiceGetSliceResult{}
}

var TIBSDataServiceGetSliceResult_Success_DEFAULT *TItemSetResult_

func (p *TIBSDataServiceGetSliceResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServiceGetSliceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServiceGetSliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceGetSliceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSlice_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceGetSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetSliceResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromKey
//  - Count
type TIBSDataServiceGetSliceFromItemArgs struct {
	BigsetID TKey     `thrift:"bigsetID,1" json:"bigsetID"`
	FromKey  TItemKey `thrift:"fromKey,2" json:"fromKey"`
	Count    int32    `thrift:"count,3" json:"count"`
}

func NewTIBSDataServiceGetSliceFromItemArgs() *TIBSDataServiceGetSliceFromItemArgs {
	return &TIBSDataServiceGetSliceFromItemArgs{}
}

func (p *TIBSDataServiceGetSliceFromItemArgs) GetBigsetID() TKey {
	return p.BigsetID
}

func (p *TIBSDataServiceGetSliceFromItemArgs) GetFromKey() TItemKey {
	return p.FromKey
}

func (p *TIBSDataServiceGetSliceFromItemArgs) GetCount() int32 {
	return p.Count
}
func (p *TIBSDataServiceGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.FromKey = temp
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSliceFromItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.FromKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceFromItemResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceFromItemResult() *TIBSDataServiceGetSliceFromItemResult {
	return &TIBSDataServiceGetSliceFromItemResult{}
}

var TIBSDataServiceGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_

func (p *TIBSDataServiceGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServiceGetSliceFromItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServiceGetSliceFromItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSliceFromItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceGetSliceFromItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromIndex
//  - Count
type TIBSDataServiceGetSliceRArgs struct {
	BigsetID  TKey  `thrift:"bigsetID,1" json:"bigsetID"`
	FromIndex int32 `thrift:"fromIndex,2" json:"fromIndex"`
	Count     int32 `thrift:"count,3" json:"count"`
}

func NewTIBSDataServiceGetSliceRArgs() *TIBSDataServiceGetSliceRArgs {
	return &TIBSDataServiceGetSliceRArgs{}
}

func (p *TIBSDataServiceGetSliceRArgs) GetBigsetID() TKey {
	return p.BigsetID
}

func (p *TIBSDataServiceGetSliceRArgs) GetFromIndex() int32 {
	return p.FromIndex
}

func (p *TIBSDataServiceGetSliceRArgs) GetCount() int32 {
	return p.Count
}
func (p *TIBSDataServiceGetSliceRArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceRArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceGetSliceRArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FromIndex = v
	}
	return nil
}

func (p *TIBSDataServiceGetSliceRArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TIBSDataServiceGetSliceRArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSliceR_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromIndex", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromIndex (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIndex: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceRArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceRResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceRResult() *TIBSDataServiceGetSliceRResult {
	return &TIBSDataServiceGetSliceRResult{}
}

var TIBSDataServiceGetSliceRResult_Success_DEFAULT *TItemSetResult_

func (p *TIBSDataServiceGetSliceRResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServiceGetSliceRResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServiceGetSliceRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceGetSliceRResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceRResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceRResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSliceR_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceGetSliceRResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromKey
//  - Count
type TIBSDataServiceGetSliceFromItemRArgs struct {
	BigsetID TKey     `thrift:"bigsetID,1" json:"bigsetID"`
	FromKey  TItemKey `thrift:"fromKey,2" json:"fromKey"`
	Count    int32    `thrift:"count,3" json:"count"`
}

func NewTIBSDataServiceGetSliceFromItemRArgs() *TIBSDataServiceGetSliceFromItemRArgs {
	return &TIBSDataServiceGetSliceFromItemRArgs{}
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) GetBigsetID() TKey {
	return p.BigsetID
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) GetFromKey() TItemKey {
	return p.FromKey
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) GetCount() int32 {
	return p.Count
}
func (p *TIBSDataServiceGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.FromKey = temp
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSliceFromItemR_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.FromKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceFromItemRResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceFromItemRResult() *TIBSDataServiceGetSliceFromItemRResult {
	return &TIBSDataServiceGetSliceFromItemRResult{}
}

var TIBSDataServiceGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_

func (p *TIBSDataServiceGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServiceGetSliceFromItemRResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServiceGetSliceFromItemRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSliceFromItemR_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceGetSliceFromItemRResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - StartKey
//  - EndKey
type TIBSDataServiceRangeQueryArgs struct {
	BigsetID TKey     `thrift:"bigsetID,1" json:"bigsetID"`
	StartKey TItemKey `thrift:"startKey,2" json:"startKey"`
	EndKey   TItemKey `thrift:"endKey,3" json:"endKey"`
}

func NewTIBSDataServiceRangeQueryArgs() *TIBSDataServiceRangeQueryArgs {
	return &TIBSDataServiceRangeQueryArgs{}
}

func (p *TIBSDataServiceRangeQueryArgs) GetBigsetID() TKey {
	return p.BigsetID
}

func (p *TIBSDataServiceRangeQueryArgs) GetStartKey() TItemKey {
	return p.StartKey
}

func (p *TIBSDataServiceRangeQueryArgs) GetEndKey() TItemKey {
	return p.EndKey
}
func (p *TIBSDataServiceRangeQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceRangeQueryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceRangeQueryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.StartKey = temp
	}
	return nil
}

func (p *TIBSDataServiceRangeQueryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TItemKey(v)
		p.EndKey = temp
	}
	return nil
}

func (p *TIBSDataServiceRangeQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rangeQuery_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceRangeQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceRangeQueryResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceRangeQueryResult() *TIBSDataServiceRangeQueryResult {
	return &TIBSDataServiceRangeQueryResult{}
}

var TIBSDataServiceRangeQueryResult_Success_DEFAULT *TItemSetResult_

func (p *TIBSDataServiceRangeQueryResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServiceRangeQueryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServiceRangeQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceRangeQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceRangeQueryResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServiceRangeQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rangeQuery_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceRangeQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - SetData
type TIBSDataServiceBulkLoadArgs struct {
	BigsetID TKey      `thrift:"bigsetID,1" json:"bigsetID"`
	SetData  *TItemSet `thrift:"setData,2" json:"setData"`
}

func NewTIBSDataServiceBulkLoadArgs() *TIBSDataServiceBulkLoadArgs {
	return &TIBSDataServiceBulkLoadArgs{}
}

func (p *TIBSDataServiceBulkLoadArgs) GetBigsetID() TKey {
	return p.BigsetID
}

var TIBSDataServiceBulkLoadArgs_SetData_DEFAULT *TItemSet

func (p *TIBSDataServiceBulkLoadArgs) GetSetData() *TItemSet {
	if !p.IsSetSetData() {
		return TIBSDataServiceBulkLoadArgs_SetData_DEFAULT
	}
	return p.SetData
}
func (p *TIBSDataServiceBulkLoadArgs) IsSetSetData() bool {
	return p.SetData != nil
}

func (p *TIBSDataServiceBulkLoadArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceBulkLoadArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceBulkLoadArgs) readField2(iprot thrift.TProtocol) error {
	p.SetData = &TItemSet{}
	if err := p.SetData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
	}
	return nil
}

func (p *TIBSDataServiceBulkLoadArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bulkLoad_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err)
	}
	if err := p.SetData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceBulkLoadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceBulkLoadResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceBulkLoadResult() *TIBSDataServiceBulkLoadResult {
	return &TIBSDataServiceBulkLoadResult{}
}

var TIBSDataServiceBulkLoadResult_Success_DEFAULT bool

func (p *TIBSDataServiceBulkLoadResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TIBSDataServiceBulkLoadResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TIBSDataServiceBulkLoadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceBulkLoadResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceBulkLoadResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TIBSDataServiceBulkLoadResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bulkLoad_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceBulkLoadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TIBSDataServiceMultiPutArgs struct {
	BigsetID         TKey      `thrift:"bigsetID,1" json:"bigsetID"`
	SetData          *TItemSet `thrift:"setData,2" json:"setData"`
	GetAddedItems    bool      `thrift:"getAddedItems,3" json:"getAddedItems"`
	GetReplacedItems bool      `thrift:"getReplacedItems,4" json:"getReplacedItems"`
}

func NewTIBSDataServiceMultiPutArgs() *TIBSDataServiceMultiPutArgs {
	return &TIBSDataServiceMultiPutArgs{}
}

func (p *TIBSDataServiceMultiPutArgs) GetBigsetID() TKey {
	return p.BigsetID
}

var TIBSDataServiceMultiPutArgs_SetData_DEFAULT *TItemSet

func (p *TIBSDataServiceMultiPutArgs) GetSetData() *TItemSet {
	if !p.IsSetSetData() {
		return TIBSDataServiceMultiPutArgs_SetData_DEFAULT
	}
	return p.SetData
}

func (p *TIBSDataServiceMultiPutArgs) GetGetAddedItems() bool {
	return p.GetAddedItems
}

func (p *TIBSDataServiceMultiPutArgs) GetGetReplacedItems() bool {
	return p.GetReplacedItems
}
func (p *TIBSDataServiceMultiPutArgs) IsSetSetData() bool {
	return p.SetData != nil
}

func (p *TIBSDataServiceMultiPutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceMultiPutArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceMultiPutArgs) readField2(iprot thrift.TProtocol) error {
	p.SetData = &TItemSet{}
	if err := p.SetData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
	}
	return nil
}

func (p *TIBSDataServiceMultiPutArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GetAddedItems = v
	}
	return nil
}

func (p *TIBSDataServiceMultiPutArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GetReplacedItems = v
	}
	return nil
}

func (p *TIBSDataServiceMultiPutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multiPut_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err)
	}
	if err := p.SetData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceMultiPutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceMultiPutResult struct {
	Success *TMultiPutItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceMultiPutResult() *TIBSDataServiceMultiPutResult {
	return &TIBSDataServiceMultiPutResult{}
}

var TIBSDataServiceMultiPutResult_Success_DEFAULT *TMultiPutItemResult_

func (p *TIBSDataServiceMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
	if !p.IsSetSuccess() {
		return TIBSDataServiceMultiPutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TIBSDataServiceMultiPutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceMultiPutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceMultiPutResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TMultiPutItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TIBSDataServiceMultiPutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multiPut_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceMultiPutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceMultiPutResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
type TIBSDataServiceGetTotalCountArgs struct {
	BigsetID TKey `thrift:"bigsetID,1" json:"bigsetID"`
}

func NewTIBSDataServiceGetTotalCountArgs() *TIBSDataServiceGetTotalCountArgs {
	return &TIBSDataServiceGetTotalCountArgs{}
}

func (p *TIBSDataServiceGetTotalCountArgs) GetBigsetID() TKey {
	return p.BigsetID
}
func (p *TIBSDataServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetTotalCountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TIBSDataServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err)
	}
	return err
}

func (p *TIBSDataServiceGetTotalCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetTotalCountResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTIBSDataServiceGetTotalCountResult() *TIBSDataServiceGetTotalCountResult {
	return &TIBSDataServiceGetTotalCountResult{}
}

var TIBSDataServiceGetTotalCountResult_Success_DEFAULT int64

func (p *TIBSDataServiceGetTotalCountResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TIBSDataServiceGetTotalCountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TIBSDataServiceGetTotalCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TIBSDataServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIBSDataServiceGetTotalCountResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TIBSDataServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIBSDataServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TIBSDataServiceGetTotalCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIBSDataServiceGetTotalCountResult(%+v)", *p)
}
