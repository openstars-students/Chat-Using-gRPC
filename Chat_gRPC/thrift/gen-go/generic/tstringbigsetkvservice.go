// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generic

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TStringBigSetKVService interface {
	// Parameters:
	//  - BsName
	CreateStringBigSet(bsName TStringKey) (r *TBigSetInfoResult_, err error)
	// Parameters:
	//  - BsName
	GetBigSetInfoByName(bsName TStringKey) (r *TBigSetInfoResult_, err error)
	// Parameters:
	//  - BsName
	//  - BigsetID
	AssignBigSetName(bsName TStringKey, bigsetID TContainerKey) (r *TBigSetInfoResult_, err error)
	// Parameters:
	//  - BsName
	//  - Item
	BsPutItem(bsName TStringKey, item *TItem) (r *TPutItemResult_, err error)
	// Parameters:
	//  - BsName
	//  - ItemKey
	BsRemoveItem(bsName TStringKey, itemKey TItemKey) (r bool, err error)
	// Parameters:
	//  - BsName
	//  - ItemKey
	BsExisted(bsName TStringKey, itemKey TItemKey) (r *TExistedResult_, err error)
	// Parameters:
	//  - BsName
	//  - ItemKey
	BsGetItem(bsName TStringKey, itemKey TItemKey) (r *TItemResult_, err error)
	// Parameters:
	//  - BsName
	//  - FromIndex
	//  - Count
	BsGetSlice(bsName TStringKey, fromIndex int32, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BsName
	//  - FromKey
	//  - Count
	BsGetSliceFromItem(bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BsName
	//  - FromIndex
	//  - Count
	BsGetSliceR(bsName TStringKey, fromIndex int32, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BsName
	//  - FromKey
	//  - Count
	BsGetSliceFromItemR(bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BsName
	//  - StartKey
	//  - EndKey
	BsRangeQuery(bsName TStringKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
	// Parameters:
	//  - BsName
	//  - SetData
	BsBulkLoad(bsName TStringKey, setData *TItemSet) (r bool, err error)
	// Parameters:
	//  - BsName
	//  - SetData
	//  - GetAddedItems
	//  - GetReplacedItems
	BsMultiPut(bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
	// Parameters:
	//  - BsName
	GetTotalCount(bsName TStringKey) (r int64, err error)
}

type TStringBigSetKVServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTStringBigSetKVServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TStringBigSetKVServiceClient {
	return &TStringBigSetKVServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTStringBigSetKVServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TStringBigSetKVServiceClient {
	return &TStringBigSetKVServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) CreateStringBigSet(bsName TStringKey) (r *TBigSetInfoResult_, err error) {
	if err = p.sendCreateStringBigSet(bsName); err != nil {
		return
	}
	return p.recvCreateStringBigSet()
}

func (p *TStringBigSetKVServiceClient) sendCreateStringBigSet(bsName TStringKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createStringBigSet", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceCreateStringBigSetArgs{
		BsName: bsName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvCreateStringBigSet() (value *TBigSetInfoResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createStringBigSet" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createStringBigSet failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createStringBigSet failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createStringBigSet failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceCreateStringBigSetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) GetBigSetInfoByName(bsName TStringKey) (r *TBigSetInfoResult_, err error) {
	if err = p.sendGetBigSetInfoByName(bsName); err != nil {
		return
	}
	return p.recvGetBigSetInfoByName()
}

func (p *TStringBigSetKVServiceClient) sendGetBigSetInfoByName(bsName TStringKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBigSetInfoByName", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceGetBigSetInfoByNameArgs{
		BsName: bsName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvGetBigSetInfoByName() (value *TBigSetInfoResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBigSetInfoByName" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBigSetInfoByName failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBigSetInfoByName failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBigSetInfoByName failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceGetBigSetInfoByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - BigsetID
func (p *TStringBigSetKVServiceClient) AssignBigSetName(bsName TStringKey, bigsetID TContainerKey) (r *TBigSetInfoResult_, err error) {
	if err = p.sendAssignBigSetName(bsName, bigsetID); err != nil {
		return
	}
	return p.recvAssignBigSetName()
}

func (p *TStringBigSetKVServiceClient) sendAssignBigSetName(bsName TStringKey, bigsetID TContainerKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("assignBigSetName", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceAssignBigSetNameArgs{
		BsName:   bsName,
		BigsetID: bigsetID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvAssignBigSetName() (value *TBigSetInfoResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "assignBigSetName" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "assignBigSetName failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "assignBigSetName failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "assignBigSetName failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceAssignBigSetNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - Item
func (p *TStringBigSetKVServiceClient) BsPutItem(bsName TStringKey, item *TItem) (r *TPutItemResult_, err error) {
	if err = p.sendBsPutItem(bsName, item); err != nil {
		return
	}
	return p.recvBsPutItem()
}

func (p *TStringBigSetKVServiceClient) sendBsPutItem(bsName TStringKey, item *TItem) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsPutItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsPutItemArgs{
		BsName: bsName,
		Item:   item,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsPutItem() (value *TPutItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsPutItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsPutItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsPutItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsPutItem failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsPutItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsRemoveItem(bsName TStringKey, itemKey TItemKey) (r bool, err error) {
	if err = p.sendBsRemoveItem(bsName, itemKey); err != nil {
		return
	}
	return p.recvBsRemoveItem()
}

func (p *TStringBigSetKVServiceClient) sendBsRemoveItem(bsName TStringKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsRemoveItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsRemoveItemArgs{
		BsName:  bsName,
		ItemKey: itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsRemoveItem() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsRemoveItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsRemoveItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsRemoveItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsRemoveItem failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsRemoveItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsExisted(bsName TStringKey, itemKey TItemKey) (r *TExistedResult_, err error) {
	if err = p.sendBsExisted(bsName, itemKey); err != nil {
		return
	}
	return p.recvBsExisted()
}

func (p *TStringBigSetKVServiceClient) sendBsExisted(bsName TStringKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsExisted", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsExistedArgs{
		BsName:  bsName,
		ItemKey: itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsExisted() (value *TExistedResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsExisted" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsExisted failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsExisted failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsExisted failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsExistedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsGetItem(bsName TStringKey, itemKey TItemKey) (r *TItemResult_, err error) {
	if err = p.sendBsGetItem(bsName, itemKey); err != nil {
		return
	}
	return p.recvBsGetItem()
}

func (p *TStringBigSetKVServiceClient) sendBsGetItem(bsName TStringKey, itemKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsGetItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsGetItemArgs{
		BsName:  bsName,
		ItemKey: itemKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsGetItem() (value *TItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsGetItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsGetItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsGetItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsGetItem failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsGetItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - FromIndex
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSlice(bsName TStringKey, fromIndex int32, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendBsGetSlice(bsName, fromIndex, count); err != nil {
		return
	}
	return p.recvBsGetSlice()
}

func (p *TStringBigSetKVServiceClient) sendBsGetSlice(bsName TStringKey, fromIndex int32, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsGetSlice", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsGetSliceArgs{
		BsName:    bsName,
		FromIndex: fromIndex,
		Count:     count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsGetSlice() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsGetSlice" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsGetSlice failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsGetSlice failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsGetSlice failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsGetSliceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - FromKey
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceFromItem(bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendBsGetSliceFromItem(bsName, fromKey, count); err != nil {
		return
	}
	return p.recvBsGetSliceFromItem()
}

func (p *TStringBigSetKVServiceClient) sendBsGetSliceFromItem(bsName TStringKey, fromKey TItemKey, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsGetSliceFromItemArgs{
		BsName:  bsName,
		FromKey: fromKey,
		Count:   count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsGetSliceFromItem() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsGetSliceFromItem" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsGetSliceFromItem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsGetSliceFromItem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsGetSliceFromItem failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsGetSliceFromItemResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - FromIndex
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceR(bsName TStringKey, fromIndex int32, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendBsGetSliceR(bsName, fromIndex, count); err != nil {
		return
	}
	return p.recvBsGetSliceR()
}

func (p *TStringBigSetKVServiceClient) sendBsGetSliceR(bsName TStringKey, fromIndex int32, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsGetSliceR", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsGetSliceRArgs{
		BsName:    bsName,
		FromIndex: fromIndex,
		Count:     count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsGetSliceR() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsGetSliceR" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsGetSliceR failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsGetSliceR failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsGetSliceR failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsGetSliceRResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - FromKey
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceFromItemR(bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
	if err = p.sendBsGetSliceFromItemR(bsName, fromKey, count); err != nil {
		return
	}
	return p.recvBsGetSliceFromItemR()
}

func (p *TStringBigSetKVServiceClient) sendBsGetSliceFromItemR(bsName TStringKey, fromKey TItemKey, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsGetSliceFromItemRArgs{
		BsName:  bsName,
		FromKey: fromKey,
		Count:   count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsGetSliceFromItemR() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsGetSliceFromItemR" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsGetSliceFromItemR failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsGetSliceFromItemR failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsGetSliceFromItemR failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsGetSliceFromItemRResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - StartKey
//  - EndKey
func (p *TStringBigSetKVServiceClient) BsRangeQuery(bsName TStringKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
	if err = p.sendBsRangeQuery(bsName, startKey, endKey); err != nil {
		return
	}
	return p.recvBsRangeQuery()
}

func (p *TStringBigSetKVServiceClient) sendBsRangeQuery(bsName TStringKey, startKey TItemKey, endKey TItemKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsRangeQuery", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsRangeQueryArgs{
		BsName:   bsName,
		StartKey: startKey,
		EndKey:   endKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsRangeQuery() (value *TItemSetResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsRangeQuery" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsRangeQuery failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsRangeQuery failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsRangeQuery failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsRangeQueryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - SetData
func (p *TStringBigSetKVServiceClient) BsBulkLoad(bsName TStringKey, setData *TItemSet) (r bool, err error) {
	if err = p.sendBsBulkLoad(bsName, setData); err != nil {
		return
	}
	return p.recvBsBulkLoad()
}

func (p *TStringBigSetKVServiceClient) sendBsBulkLoad(bsName TStringKey, setData *TItemSet) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsBulkLoad", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsBulkLoadArgs{
		BsName:  bsName,
		SetData: setData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsBulkLoad() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsBulkLoad" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsBulkLoad failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsBulkLoad failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsBulkLoad failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsBulkLoadResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TStringBigSetKVServiceClient) BsMultiPut(bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
	if err = p.sendBsMultiPut(bsName, setData, getAddedItems, getReplacedItems); err != nil {
		return
	}
	return p.recvBsMultiPut()
}

func (p *TStringBigSetKVServiceClient) sendBsMultiPut(bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bsMultiPut", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceBsMultiPutArgs{
		BsName:           bsName,
		SetData:          setData,
		GetAddedItems:    getAddedItems,
		GetReplacedItems: getReplacedItems,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvBsMultiPut() (value *TMultiPutItemResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bsMultiPut" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bsMultiPut failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bsMultiPut failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bsMultiPut failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceBsMultiPutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) GetTotalCount(bsName TStringKey) (r int64, err error) {
	if err = p.sendGetTotalCount(bsName); err != nil {
		return
	}
	return p.recvGetTotalCount()
}

func (p *TStringBigSetKVServiceClient) sendGetTotalCount(bsName TStringKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTotalCount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TStringBigSetKVServiceGetTotalCountArgs{
		BsName: bsName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TStringBigSetKVServiceClient) recvGetTotalCount() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getTotalCount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getTotalCount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTotalCount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTotalCount failed: invalid message type")
		return
	}
	result := TStringBigSetKVServiceGetTotalCountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type TStringBigSetKVServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TStringBigSetKVService
}

func (p *TStringBigSetKVServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TStringBigSetKVServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TStringBigSetKVServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTStringBigSetKVServiceProcessor(handler TStringBigSetKVService) *TStringBigSetKVServiceProcessor {

	self134 := &TStringBigSetKVServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self134.processorMap["createStringBigSet"] = &tStringBigSetKVServiceProcessorCreateStringBigSet{handler: handler}
	self134.processorMap["getBigSetInfoByName"] = &tStringBigSetKVServiceProcessorGetBigSetInfoByName{handler: handler}
	self134.processorMap["assignBigSetName"] = &tStringBigSetKVServiceProcessorAssignBigSetName{handler: handler}
	self134.processorMap["bsPutItem"] = &tStringBigSetKVServiceProcessorBsPutItem{handler: handler}
	self134.processorMap["bsRemoveItem"] = &tStringBigSetKVServiceProcessorBsRemoveItem{handler: handler}
	self134.processorMap["bsExisted"] = &tStringBigSetKVServiceProcessorBsExisted{handler: handler}
	self134.processorMap["bsGetItem"] = &tStringBigSetKVServiceProcessorBsGetItem{handler: handler}
	self134.processorMap["bsGetSlice"] = &tStringBigSetKVServiceProcessorBsGetSlice{handler: handler}
	self134.processorMap["bsGetSliceFromItem"] = &tStringBigSetKVServiceProcessorBsGetSliceFromItem{handler: handler}
	self134.processorMap["bsGetSliceR"] = &tStringBigSetKVServiceProcessorBsGetSliceR{handler: handler}
	self134.processorMap["bsGetSliceFromItemR"] = &tStringBigSetKVServiceProcessorBsGetSliceFromItemR{handler: handler}
	self134.processorMap["bsRangeQuery"] = &tStringBigSetKVServiceProcessorBsRangeQuery{handler: handler}
	self134.processorMap["bsBulkLoad"] = &tStringBigSetKVServiceProcessorBsBulkLoad{handler: handler}
	self134.processorMap["bsMultiPut"] = &tStringBigSetKVServiceProcessorBsMultiPut{handler: handler}
	self134.processorMap["getTotalCount"] = &tStringBigSetKVServiceProcessorGetTotalCount{handler: handler}
	return self134
}

func (p *TStringBigSetKVServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x135 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x135.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x135

}

type tStringBigSetKVServiceProcessorCreateStringBigSet struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorCreateStringBigSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceCreateStringBigSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createStringBigSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceCreateStringBigSetResult{}
	var retval *TBigSetInfoResult_
	var err2 error
	if retval, err2 = p.handler.CreateStringBigSet(args.BsName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createStringBigSet: "+err2.Error())
		oprot.WriteMessageBegin("createStringBigSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createStringBigSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorGetBigSetInfoByName struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetBigSetInfoByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceGetBigSetInfoByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBigSetInfoByName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceGetBigSetInfoByNameResult{}
	var retval *TBigSetInfoResult_
	var err2 error
	if retval, err2 = p.handler.GetBigSetInfoByName(args.BsName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBigSetInfoByName: "+err2.Error())
		oprot.WriteMessageBegin("getBigSetInfoByName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBigSetInfoByName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorAssignBigSetName struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorAssignBigSetName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceAssignBigSetNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("assignBigSetName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceAssignBigSetNameResult{}
	var retval *TBigSetInfoResult_
	var err2 error
	if retval, err2 = p.handler.AssignBigSetName(args.BsName, args.BigsetID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing assignBigSetName: "+err2.Error())
		oprot.WriteMessageBegin("assignBigSetName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("assignBigSetName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsPutItem struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsPutItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsPutItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsPutItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsPutItemResult{}
	var retval *TPutItemResult_
	var err2 error
	if retval, err2 = p.handler.BsPutItem(args.BsName, args.Item); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsPutItem: "+err2.Error())
		oprot.WriteMessageBegin("bsPutItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsPutItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsRemoveItem struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsRemoveItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsRemoveItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsRemoveItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsRemoveItemResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.BsRemoveItem(args.BsName, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsRemoveItem: "+err2.Error())
		oprot.WriteMessageBegin("bsRemoveItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("bsRemoveItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsExisted struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsExisted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsExistedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsExisted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsExistedResult{}
	var retval *TExistedResult_
	var err2 error
	if retval, err2 = p.handler.BsExisted(args.BsName, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsExisted: "+err2.Error())
		oprot.WriteMessageBegin("bsExisted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsExisted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsGetItem struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsGetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsGetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsGetItemResult{}
	var retval *TItemResult_
	var err2 error
	if retval, err2 = p.handler.BsGetItem(args.BsName, args.ItemKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetItem: "+err2.Error())
		oprot.WriteMessageBegin("bsGetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsGetItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsGetSlice struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsGetSliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsGetSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsGetSliceResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsGetSlice(args.BsName, args.FromIndex, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSlice: "+err2.Error())
		oprot.WriteMessageBegin("bsGetSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsGetSlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceFromItem struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceFromItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsGetSliceFromItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsGetSliceFromItemResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsGetSliceFromItem(args.BsName, args.FromKey, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceFromItem: "+err2.Error())
		oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceR struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceR) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsGetSliceRArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsGetSliceR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsGetSliceRResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsGetSliceR(args.BsName, args.FromIndex, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceR: "+err2.Error())
		oprot.WriteMessageBegin("bsGetSliceR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsGetSliceR", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceFromItemR struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceFromItemR) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsGetSliceFromItemRArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsGetSliceFromItemRResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsGetSliceFromItemR(args.BsName, args.FromKey, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceFromItemR: "+err2.Error())
		oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsRangeQuery struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsRangeQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsRangeQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsRangeQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsRangeQueryResult{}
	var retval *TItemSetResult_
	var err2 error
	if retval, err2 = p.handler.BsRangeQuery(args.BsName, args.StartKey, args.EndKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsRangeQuery: "+err2.Error())
		oprot.WriteMessageBegin("bsRangeQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsRangeQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsBulkLoad struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsBulkLoad) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsBulkLoadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsBulkLoad", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsBulkLoadResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.BsBulkLoad(args.BsName, args.SetData); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsBulkLoad: "+err2.Error())
		oprot.WriteMessageBegin("bsBulkLoad", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("bsBulkLoad", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorBsMultiPut struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsMultiPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceBsMultiPutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bsMultiPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceBsMultiPutResult{}
	var retval *TMultiPutItemResult_
	var err2 error
	if retval, err2 = p.handler.BsMultiPut(args.BsName, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsMultiPut: "+err2.Error())
		oprot.WriteMessageBegin("bsMultiPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bsMultiPut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tStringBigSetKVServiceProcessorGetTotalCount struct {
	handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetTotalCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TStringBigSetKVServiceGetTotalCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TStringBigSetKVServiceGetTotalCountResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetTotalCount(args.BsName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: "+err2.Error())
		oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BsName
type TStringBigSetKVServiceCreateStringBigSetArgs struct {
	BsName TStringKey `thrift:"bsName,1" json:"bsName"`
}

func NewTStringBigSetKVServiceCreateStringBigSetArgs() *TStringBigSetKVServiceCreateStringBigSetArgs {
	return &TStringBigSetKVServiceCreateStringBigSetArgs{}
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) GetBsName() TStringKey {
	return p.BsName
}
func (p *TStringBigSetKVServiceCreateStringBigSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createStringBigSet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceCreateStringBigSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceCreateStringBigSetResult struct {
	Success *TBigSetInfoResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceCreateStringBigSetResult() *TStringBigSetKVServiceCreateStringBigSetResult {
	return &TStringBigSetKVServiceCreateStringBigSetResult{}
}

var TStringBigSetKVServiceCreateStringBigSetResult_Success_DEFAULT *TBigSetInfoResult_

func (p *TStringBigSetKVServiceCreateStringBigSetResult) GetSuccess() *TBigSetInfoResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceCreateStringBigSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceCreateStringBigSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TBigSetInfoResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createStringBigSet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceCreateStringBigSetResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBigSetKVServiceGetBigSetInfoByNameArgs struct {
	BsName TStringKey `thrift:"bsName,1" json:"bsName"`
}

func NewTStringBigSetKVServiceGetBigSetInfoByNameArgs() *TStringBigSetKVServiceGetBigSetInfoByNameArgs {
	return &TStringBigSetKVServiceGetBigSetInfoByNameArgs{}
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) GetBsName() TStringKey {
	return p.BsName
}
func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBigSetInfoByName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceGetBigSetInfoByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetBigSetInfoByNameResult struct {
	Success *TBigSetInfoResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetBigSetInfoByNameResult() *TStringBigSetKVServiceGetBigSetInfoByNameResult {
	return &TStringBigSetKVServiceGetBigSetInfoByNameResult{}
}

var TStringBigSetKVServiceGetBigSetInfoByNameResult_Success_DEFAULT *TBigSetInfoResult_

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) GetSuccess() *TBigSetInfoResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceGetBigSetInfoByNameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TBigSetInfoResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBigSetInfoByName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceGetBigSetInfoByNameResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - BigsetID
type TStringBigSetKVServiceAssignBigSetNameArgs struct {
	BsName   TStringKey    `thrift:"bsName,1" json:"bsName"`
	BigsetID TContainerKey `thrift:"bigsetID,2" json:"bigsetID"`
}

func NewTStringBigSetKVServiceAssignBigSetNameArgs() *TStringBigSetKVServiceAssignBigSetNameArgs {
	return &TStringBigSetKVServiceAssignBigSetNameArgs{}
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) GetBigsetID() TContainerKey {
	return p.BigsetID
}
func (p *TStringBigSetKVServiceAssignBigSetNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TContainerKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("assignBigSetName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigsetID: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceAssignBigSetNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceAssignBigSetNameResult struct {
	Success *TBigSetInfoResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceAssignBigSetNameResult() *TStringBigSetKVServiceAssignBigSetNameResult {
	return &TStringBigSetKVServiceAssignBigSetNameResult{}
}

var TStringBigSetKVServiceAssignBigSetNameResult_Success_DEFAULT *TBigSetInfoResult_

func (p *TStringBigSetKVServiceAssignBigSetNameResult) GetSuccess() *TBigSetInfoResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceAssignBigSetNameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceAssignBigSetNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TBigSetInfoResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("assignBigSetName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceAssignBigSetNameResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - Item
type TStringBigSetKVServiceBsPutItemArgs struct {
	BsName TStringKey `thrift:"bsName,1" json:"bsName"`
	Item   *TItem     `thrift:"item,2" json:"item"`
}

func NewTStringBigSetKVServiceBsPutItemArgs() *TStringBigSetKVServiceBsPutItemArgs {
	return &TStringBigSetKVServiceBsPutItemArgs{}
}

func (p *TStringBigSetKVServiceBsPutItemArgs) GetBsName() TStringKey {
	return p.BsName
}

var TStringBigSetKVServiceBsPutItemArgs_Item_DEFAULT *TItem

func (p *TStringBigSetKVServiceBsPutItemArgs) GetItem() *TItem {
	if !p.IsSetItem() {
		return TStringBigSetKVServiceBsPutItemArgs_Item_DEFAULT
	}
	return p.Item
}
func (p *TStringBigSetKVServiceBsPutItemArgs) IsSetItem() bool {
	return p.Item != nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) readField2(iprot thrift.TProtocol) error {
	p.Item = &TItem{}
	if err := p.Item.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsPutItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsPutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err)
	}
	if err := p.Item.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsPutItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsPutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsPutItemResult struct {
	Success *TPutItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsPutItemResult() *TStringBigSetKVServiceBsPutItemResult {
	return &TStringBigSetKVServiceBsPutItemResult{}
}

var TStringBigSetKVServiceBsPutItemResult_Success_DEFAULT *TPutItemResult_

func (p *TStringBigSetKVServiceBsPutItemResult) GetSuccess() *TPutItemResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsPutItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsPutItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TPutItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsPutItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsPutItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsPutItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsRemoveItemArgs struct {
	BsName  TStringKey `thrift:"bsName,1" json:"bsName"`
	ItemKey TItemKey   `thrift:"itemKey,2" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsRemoveItemArgs() *TStringBigSetKVServiceBsRemoveItemArgs {
	return &TStringBigSetKVServiceBsRemoveItemArgs{}
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TStringBigSetKVServiceBsRemoveItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsRemoveItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsRemoveItemResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsRemoveItemResult() *TStringBigSetKVServiceBsRemoveItemResult {
	return &TStringBigSetKVServiceBsRemoveItemResult{}
}

var TStringBigSetKVServiceBsRemoveItemResult_Success_DEFAULT bool

func (p *TStringBigSetKVServiceBsRemoveItemResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsRemoveItemResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TStringBigSetKVServiceBsRemoveItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsRemoveItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsExistedArgs struct {
	BsName  TStringKey `thrift:"bsName,1" json:"bsName"`
	ItemKey TItemKey   `thrift:"itemKey,2" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsExistedArgs() *TStringBigSetKVServiceBsExistedArgs {
	return &TStringBigSetKVServiceBsExistedArgs{}
}

func (p *TStringBigSetKVServiceBsExistedArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceBsExistedArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TStringBigSetKVServiceBsExistedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsExisted_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsExistedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsExistedResult struct {
	Success *TExistedResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsExistedResult() *TStringBigSetKVServiceBsExistedResult {
	return &TStringBigSetKVServiceBsExistedResult{}
}

var TStringBigSetKVServiceBsExistedResult_Success_DEFAULT *TExistedResult_

func (p *TStringBigSetKVServiceBsExistedResult) GetSuccess() *TExistedResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsExistedResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsExistedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsExistedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsExistedResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TExistedResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsExistedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsExisted_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsExistedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsExistedResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsGetItemArgs struct {
	BsName  TStringKey `thrift:"bsName,1" json:"bsName"`
	ItemKey TItemKey   `thrift:"itemKey,2" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsGetItemArgs() *TStringBigSetKVServiceBsGetItemArgs {
	return &TStringBigSetKVServiceBsGetItemArgs{}
}

func (p *TStringBigSetKVServiceBsGetItemArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceBsGetItemArgs) GetItemKey() TItemKey {
	return p.ItemKey
}
func (p *TStringBigSetKVServiceBsGetItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.ItemKey = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.ItemKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetItemResult struct {
	Success *TItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetItemResult() *TStringBigSetKVServiceBsGetItemResult {
	return &TStringBigSetKVServiceBsGetItemResult{}
}

var TStringBigSetKVServiceBsGetItemResult_Success_DEFAULT *TItemResult_

func (p *TStringBigSetKVServiceBsGetItemResult) GetSuccess() *TItemResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsGetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsGetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromIndex
//  - Count
type TStringBigSetKVServiceBsGetSliceArgs struct {
	BsName    TStringKey `thrift:"bsName,1" json:"bsName"`
	FromIndex int32      `thrift:"fromIndex,2" json:"fromIndex"`
	Count     int32      `thrift:"count,3" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceArgs() *TStringBigSetKVServiceBsGetSliceArgs {
	return &TStringBigSetKVServiceBsGetSliceArgs{}
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) GetFromIndex() int32 {
	return p.FromIndex
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) GetCount() int32 {
	return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FromIndex = v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetSlice_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromIndex", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromIndex (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIndex: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceResult() *TStringBigSetKVServiceBsGetSliceResult {
	return &TStringBigSetKVServiceBsGetSliceResult{}
}

var TStringBigSetKVServiceBsGetSliceResult_Success_DEFAULT *TItemSetResult_

func (p *TStringBigSetKVServiceBsGetSliceResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsGetSliceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetSlice_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromKey
//  - Count
type TStringBigSetKVServiceBsGetSliceFromItemArgs struct {
	BsName  TStringKey `thrift:"bsName,1" json:"bsName"`
	FromKey TItemKey   `thrift:"fromKey,2" json:"fromKey"`
	Count   int32      `thrift:"count,3" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemArgs() *TStringBigSetKVServiceBsGetSliceFromItemArgs {
	return &TStringBigSetKVServiceBsGetSliceFromItemArgs{}
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetFromKey() TItemKey {
	return p.FromKey
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetCount() int32 {
	return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.FromKey = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetSliceFromItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.FromKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceFromItemResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemResult() *TStringBigSetKVServiceBsGetSliceFromItemResult {
	return &TStringBigSetKVServiceBsGetSliceFromItemResult{}
}

var TStringBigSetKVServiceBsGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsGetSliceFromItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetSliceFromItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromIndex
//  - Count
type TStringBigSetKVServiceBsGetSliceRArgs struct {
	BsName    TStringKey `thrift:"bsName,1" json:"bsName"`
	FromIndex int32      `thrift:"fromIndex,2" json:"fromIndex"`
	Count     int32      `thrift:"count,3" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceRArgs() *TStringBigSetKVServiceBsGetSliceRArgs {
	return &TStringBigSetKVServiceBsGetSliceRArgs{}
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetFromIndex() int32 {
	return p.FromIndex
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetCount() int32 {
	return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceRArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FromIndex = v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetSliceR_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromIndex", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromIndex (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIndex: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceRResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceRResult() *TStringBigSetKVServiceBsGetSliceRResult {
	return &TStringBigSetKVServiceBsGetSliceRResult{}
}

var TStringBigSetKVServiceBsGetSliceRResult_Success_DEFAULT *TItemSetResult_

func (p *TStringBigSetKVServiceBsGetSliceRResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsGetSliceRResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetSliceR_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromKey
//  - Count
type TStringBigSetKVServiceBsGetSliceFromItemRArgs struct {
	BsName  TStringKey `thrift:"bsName,1" json:"bsName"`
	FromKey TItemKey   `thrift:"fromKey,2" json:"fromKey"`
	Count   int32      `thrift:"count,3" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemRArgs() *TStringBigSetKVServiceBsGetSliceFromItemRArgs {
	return &TStringBigSetKVServiceBsGetSliceFromItemRArgs{}
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetFromKey() TItemKey {
	return p.FromKey
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetCount() int32 {
	return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.FromKey = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetSliceFromItemR_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.FromKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceFromItemRResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemRResult() *TStringBigSetKVServiceBsGetSliceFromItemRResult {
	return &TStringBigSetKVServiceBsGetSliceFromItemRResult{}
}

var TStringBigSetKVServiceBsGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsGetSliceFromItemRResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsGetSliceFromItemR_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - StartKey
//  - EndKey
type TStringBigSetKVServiceBsRangeQueryArgs struct {
	BsName   TStringKey `thrift:"bsName,1" json:"bsName"`
	StartKey TItemKey   `thrift:"startKey,2" json:"startKey"`
	EndKey   TItemKey   `thrift:"endKey,3" json:"endKey"`
}

func NewTStringBigSetKVServiceBsRangeQueryArgs() *TStringBigSetKVServiceBsRangeQueryArgs {
	return &TStringBigSetKVServiceBsRangeQueryArgs{}
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetBsName() TStringKey {
	return p.BsName
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetStartKey() TItemKey {
	return p.StartKey
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetEndKey() TItemKey {
	return p.EndKey
}
func (p *TStringBigSetKVServiceBsRangeQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.StartKey = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TItemKey(v)
		p.EndKey = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsRangeQuery_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsRangeQueryResult struct {
	Success *TItemSetResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsRangeQueryResult() *TStringBigSetKVServiceBsRangeQueryResult {
	return &TStringBigSetKVServiceBsRangeQueryResult{}
}

var TStringBigSetKVServiceBsRangeQueryResult_Success_DEFAULT *TItemSetResult_

func (p *TStringBigSetKVServiceBsRangeQueryResult) GetSuccess() *TItemSetResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsRangeQueryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsRangeQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TItemSetResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsRangeQuery_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - SetData
type TStringBigSetKVServiceBsBulkLoadArgs struct {
	BsName  TStringKey `thrift:"bsName,1" json:"bsName"`
	SetData *TItemSet  `thrift:"setData,2" json:"setData"`
}

func NewTStringBigSetKVServiceBsBulkLoadArgs() *TStringBigSetKVServiceBsBulkLoadArgs {
	return &TStringBigSetKVServiceBsBulkLoadArgs{}
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) GetBsName() TStringKey {
	return p.BsName
}

var TStringBigSetKVServiceBsBulkLoadArgs_SetData_DEFAULT *TItemSet

func (p *TStringBigSetKVServiceBsBulkLoadArgs) GetSetData() *TItemSet {
	if !p.IsSetSetData() {
		return TStringBigSetKVServiceBsBulkLoadArgs_SetData_DEFAULT
	}
	return p.SetData
}
func (p *TStringBigSetKVServiceBsBulkLoadArgs) IsSetSetData() bool {
	return p.SetData != nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) readField2(iprot thrift.TProtocol) error {
	p.SetData = &TItemSet{}
	if err := p.SetData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsBulkLoad_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err)
	}
	if err := p.SetData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsBulkLoadResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsBulkLoadResult() *TStringBigSetKVServiceBsBulkLoadResult {
	return &TStringBigSetKVServiceBsBulkLoadResult{}
}

var TStringBigSetKVServiceBsBulkLoadResult_Success_DEFAULT bool

func (p *TStringBigSetKVServiceBsBulkLoadResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsBulkLoadResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TStringBigSetKVServiceBsBulkLoadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsBulkLoad_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TStringBigSetKVServiceBsMultiPutArgs struct {
	BsName           TStringKey `thrift:"bsName,1" json:"bsName"`
	SetData          *TItemSet  `thrift:"setData,2" json:"setData"`
	GetAddedItems    bool       `thrift:"getAddedItems,3" json:"getAddedItems"`
	GetReplacedItems bool       `thrift:"getReplacedItems,4" json:"getReplacedItems"`
}

func NewTStringBigSetKVServiceBsMultiPutArgs() *TStringBigSetKVServiceBsMultiPutArgs {
	return &TStringBigSetKVServiceBsMultiPutArgs{}
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) GetBsName() TStringKey {
	return p.BsName
}

var TStringBigSetKVServiceBsMultiPutArgs_SetData_DEFAULT *TItemSet

func (p *TStringBigSetKVServiceBsMultiPutArgs) GetSetData() *TItemSet {
	if !p.IsSetSetData() {
		return TStringBigSetKVServiceBsMultiPutArgs_SetData_DEFAULT
	}
	return p.SetData
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) GetGetAddedItems() bool {
	return p.GetAddedItems
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) GetGetReplacedItems() bool {
	return p.GetReplacedItems
}
func (p *TStringBigSetKVServiceBsMultiPutArgs) IsSetSetData() bool {
	return p.SetData != nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) readField2(iprot thrift.TProtocol) error {
	p.SetData = &TItemSet{}
	if err := p.SetData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GetAddedItems = v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GetReplacedItems = v
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsMultiPut_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err)
	}
	if err := p.SetData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsMultiPutResult struct {
	Success *TMultiPutItemResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsMultiPutResult() *TStringBigSetKVServiceBsMultiPutResult {
	return &TStringBigSetKVServiceBsMultiPutResult{}
}

var TStringBigSetKVServiceBsMultiPutResult_Success_DEFAULT *TMultiPutItemResult_

func (p *TStringBigSetKVServiceBsMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceBsMultiPutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TStringBigSetKVServiceBsMultiPutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TMultiPutItemResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bsMultiPut_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceBsMultiPutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceBsMultiPutResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBigSetKVServiceGetTotalCountArgs struct {
	BsName TStringKey `thrift:"bsName,1" json:"bsName"`
}

func NewTStringBigSetKVServiceGetTotalCountArgs() *TStringBigSetKVServiceGetTotalCountArgs {
	return &TStringBigSetKVServiceGetTotalCountArgs{}
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) GetBsName() TStringKey {
	return p.BsName
}
func (p *TStringBigSetKVServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BsName = temp
	}
	return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err)
	}
	return err
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetTotalCountResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetTotalCountResult() *TStringBigSetKVServiceGetTotalCountResult {
	return &TStringBigSetKVServiceGetTotalCountResult{}
}

var TStringBigSetKVServiceGetTotalCountResult_Success_DEFAULT int64

func (p *TStringBigSetKVServiceGetTotalCountResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TStringBigSetKVServiceGetTotalCountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TStringBigSetKVServiceGetTotalCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetKVServiceGetTotalCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetKVServiceGetTotalCountResult(%+v)", *p)
}
