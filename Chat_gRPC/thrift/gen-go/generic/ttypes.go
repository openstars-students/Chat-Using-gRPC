// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generic

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type TErrorCode int64

const (
	TErrorCode_EGood                           TErrorCode = 0
	TErrorCode_ENoRootMeta                     TErrorCode = 1
	TErrorCode_ECouldNotConnectMetadata        TErrorCode = 2
	TErrorCode_ECouldNotConnectIDGen           TErrorCode = 3
	TErrorCode_ECouldNotConnectSmallSet        TErrorCode = 4
	TErrorCode_ECouldNotConnectRootMetaMapping TErrorCode = 5
	TErrorCode_EItemNotExisted                 TErrorCode = 100
	TErrorCode_EUnknownException               TErrorCode = 10
	TErrorCode_EBigSetNotExisted               TErrorCode = 101
	TErrorCode_EBigSetCreated                  TErrorCode = 102
	TErrorCode_EBigSetAlreadyExisted           TErrorCode = 103
	TErrorCode_EBigSetAssigned                 TErrorCode = 104
)

func (p TErrorCode) String() string {
	switch p {
	case TErrorCode_EGood:
		return "EGood"
	case TErrorCode_ENoRootMeta:
		return "ENoRootMeta"
	case TErrorCode_ECouldNotConnectMetadata:
		return "ECouldNotConnectMetadata"
	case TErrorCode_ECouldNotConnectIDGen:
		return "ECouldNotConnectIDGen"
	case TErrorCode_ECouldNotConnectSmallSet:
		return "ECouldNotConnectSmallSet"
	case TErrorCode_ECouldNotConnectRootMetaMapping:
		return "ECouldNotConnectRootMetaMapping"
	case TErrorCode_EItemNotExisted:
		return "EItemNotExisted"
	case TErrorCode_EUnknownException:
		return "EUnknownException"
	case TErrorCode_EBigSetNotExisted:
		return "EBigSetNotExisted"
	case TErrorCode_EBigSetCreated:
		return "EBigSetCreated"
	case TErrorCode_EBigSetAlreadyExisted:
		return "EBigSetAlreadyExisted"
	case TErrorCode_EBigSetAssigned:
		return "EBigSetAssigned"
	}
	return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
	switch s {
	case "EGood":
		return TErrorCode_EGood, nil
	case "ENoRootMeta":
		return TErrorCode_ENoRootMeta, nil
	case "ECouldNotConnectMetadata":
		return TErrorCode_ECouldNotConnectMetadata, nil
	case "ECouldNotConnectIDGen":
		return TErrorCode_ECouldNotConnectIDGen, nil
	case "ECouldNotConnectSmallSet":
		return TErrorCode_ECouldNotConnectSmallSet, nil
	case "ECouldNotConnectRootMetaMapping":
		return TErrorCode_ECouldNotConnectRootMetaMapping, nil
	case "EItemNotExisted":
		return TErrorCode_EItemNotExisted, nil
	case "EUnknownException":
		return TErrorCode_EUnknownException, nil
	case "EBigSetNotExisted":
		return TErrorCode_EBigSetNotExisted, nil
	case "EBigSetCreated":
		return TErrorCode_EBigSetCreated, nil
	case "EBigSetAlreadyExisted":
		return TErrorCode_EBigSetAlreadyExisted, nil
	case "EBigSetAssigned":
		return TErrorCode_EBigSetAssigned, nil
	}
	return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}

func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
	q, err := TErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TItemKey []byte

func TItemKeyPtr(v TItemKey) *TItemKey { return &v }

type TItemList []*TItem

func TItemListPtr(v TItemList) *TItemList { return &v }

type TItemKeySet [][]byte

func TItemKeySetPtr(v TItemKeySet) *TItemKeySet { return &v }

type TKey int64

func TKeyPtr(v TKey) *TKey { return &v }

type TContainerKey int64

func TContainerKeyPtr(v TContainerKey) *TContainerKey { return &v }

type TSmallSetIDKey TContainerKey

func TSmallSetIDKeyPtr(v TSmallSetIDKey) *TSmallSetIDKey { return &v }

type TLevelType int16

func TLevelTypePtr(v TLevelType) *TLevelType { return &v }

type TMetaKey TContainerKey

func TMetaKeyPtr(v TMetaKey) *TMetaKey { return &v }

type TStringKey string

func TStringKeyPtr(v TStringKey) *TStringKey { return &v }

// Attributes:
//  - Key
//  - Value
type TItem struct {
	Key   []byte `thrift:"key,1,required" json:"key"`
	Value []byte `thrift:"value,2,required" json:"value"`
}

func NewTItem() *TItem {
	return &TItem{}
}

func (p *TItem) GetKey() []byte {
	return p.Key
}

func (p *TItem) GetValue() []byte {
	return p.Value
}
func (p *TItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetKey bool = false
	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetKey = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetValue = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetKey {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"))
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *TItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *TItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteBinary(p.Key); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *TItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *TItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TItem(%+v)", *p)
}

// Attributes:
//  - Entries
//  - Prev
//  - Nxt
type TSmallSet struct {
	Entries TItemList       `thrift:"entries,1" json:"entries"`
	Prev    *TSmallSetIDKey `thrift:"prev,2" json:"prev,omitempty"`
	Nxt     *TSmallSetIDKey `thrift:"nxt,3" json:"nxt,omitempty"`
}

func NewTSmallSet() *TSmallSet {
	return &TSmallSet{}
}

func (p *TSmallSet) GetEntries() TItemList {
	return p.Entries
}

var TSmallSet_Prev_DEFAULT TSmallSetIDKey

func (p *TSmallSet) GetPrev() TSmallSetIDKey {
	if !p.IsSetPrev() {
		return TSmallSet_Prev_DEFAULT
	}
	return *p.Prev
}

var TSmallSet_Nxt_DEFAULT TSmallSetIDKey

func (p *TSmallSet) GetNxt() TSmallSetIDKey {
	if !p.IsSetNxt() {
		return TSmallSet_Nxt_DEFAULT
	}
	return *p.Nxt
}
func (p *TSmallSet) IsSetPrev() bool {
	return p.Prev != nil
}

func (p *TSmallSet) IsSetNxt() bool {
	return p.Nxt != nil
}

func (p *TSmallSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSmallSet) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(TItemList, 0, size)
	p.Entries = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TItem{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Entries = append(p.Entries, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSmallSet) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TSmallSetIDKey(v)
		p.Prev = &temp
	}
	return nil
}

func (p *TSmallSet) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TSmallSetIDKey(v)
		p.Nxt = &temp
	}
	return nil
}

func (p *TSmallSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSmallSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSmallSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entries", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entries: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Entries)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Entries {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entries: ", p), err)
	}
	return err
}

func (p *TSmallSet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrev() {
		if err := oprot.WriteFieldBegin("prev", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prev: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Prev)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.prev (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prev: ", p), err)
		}
	}
	return err
}

func (p *TSmallSet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNxt() {
		if err := oprot.WriteFieldBegin("nxt", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nxt: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Nxt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nxt (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nxt: ", p), err)
		}
	}
	return err
}

func (p *TSmallSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSmallSet(%+v)", *p)
}

// Attributes:
//  - Items
type TItemSet struct {
	Items []*TItem `thrift:"items,1" json:"items"`
}

func NewTItemSet() *TItemSet {
	return &TItemSet{}
}

func (p *TItemSet) GetItems() []*TItem {
	return p.Items
}
func (p *TItemSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TItemSet) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TItem, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &TItem{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Items = append(p.Items, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TItemSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TItemSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TItemSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err)
	}
	return err
}

func (p *TItemSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TItemSet(%+v)", *p)
}

// Attributes:
//  - MinItem
//  - MetaID
//  - Count
type TMetaItem struct {
	MinItem TItemKey `thrift:"minItem,1" json:"minItem"`
	MetaID  int64    `thrift:"metaID,2" json:"metaID"`
	Count   int32    `thrift:"count,3" json:"count"`
}

func NewTMetaItem() *TMetaItem {
	return &TMetaItem{}
}

func (p *TMetaItem) GetMinItem() TItemKey {
	return p.MinItem
}

func (p *TMetaItem) GetMetaID() int64 {
	return p.MetaID
}

func (p *TMetaItem) GetCount() int32 {
	return p.Count
}
func (p *TMetaItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMetaItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TItemKey(v)
		p.MinItem = temp
	}
	return nil
}

func (p *TMetaItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MetaID = v
	}
	return nil
}

func (p *TMetaItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TMetaItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMetaItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMetaItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minItem: ", p), err)
	}
	if err := oprot.WriteBinary(p.MinItem); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.minItem (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minItem: ", p), err)
	}
	return err
}

func (p *TMetaItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err)
	}
	return err
}

func (p *TMetaItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *TMetaItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMetaItem(%+v)", *p)
}

// Attributes:
//  - MetaID
//  - ParentID
//  - ChildCount
//  - IsSmallSet
type TNeedSplitInfo struct {
	MetaID     TMetaKey `thrift:"metaID,1" json:"metaID"`
	ParentID   TMetaKey `thrift:"parentID,2" json:"parentID"`
	ChildCount int32    `thrift:"childCount,3" json:"childCount"`
	IsSmallSet bool     `thrift:"isSmallSet,4" json:"isSmallSet"`
}

func NewTNeedSplitInfo() *TNeedSplitInfo {
	return &TNeedSplitInfo{}
}

func (p *TNeedSplitInfo) GetMetaID() TMetaKey {
	return p.MetaID
}

func (p *TNeedSplitInfo) GetParentID() TMetaKey {
	return p.ParentID
}

func (p *TNeedSplitInfo) GetChildCount() int32 {
	return p.ChildCount
}

func (p *TNeedSplitInfo) GetIsSmallSet() bool {
	return p.IsSmallSet
}
func (p *TNeedSplitInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TNeedSplitInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TMetaKey(v)
		p.MetaID = temp
	}
	return nil
}

func (p *TNeedSplitInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TMetaKey(v)
		p.ParentID = temp
	}
	return nil
}

func (p *TNeedSplitInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChildCount = v
	}
	return nil
}

func (p *TNeedSplitInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsSmallSet = v
	}
	return nil
}

func (p *TNeedSplitInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TNeedSplitInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TNeedSplitInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err)
	}
	return err
}

func (p *TNeedSplitInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parentID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parentID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ParentID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parentID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parentID: ", p), err)
	}
	return err
}

func (p *TNeedSplitInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("childCount", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:childCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ChildCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.childCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:childCount: ", p), err)
	}
	return err
}

func (p *TNeedSplitInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isSmallSet", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isSmallSet: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsSmallSet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isSmallSet (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isSmallSet: ", p), err)
	}
	return err
}

func (p *TNeedSplitInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNeedSplitInfo(%+v)", *p)
}

// Attributes:
//  - ParentID
//  - Level
//  - Children
//  - Smallset
//  - Splitinfo
type TBigSetGenericData struct {
	ParentID  TContainerKey   `thrift:"parentID,1" json:"parentID"`
	Level     TLevelType      `thrift:"level,2" json:"level"`
	Children  []*TMetaItem    `thrift:"children,3" json:"children,omitempty"`
	Smallset  *TSmallSet      `thrift:"smallset,4" json:"smallset,omitempty"`
	Splitinfo *TNeedSplitInfo `thrift:"splitinfo,5" json:"splitinfo,omitempty"`
}

func NewTBigSetGenericData() *TBigSetGenericData {
	return &TBigSetGenericData{}
}

func (p *TBigSetGenericData) GetParentID() TContainerKey {
	return p.ParentID
}

func (p *TBigSetGenericData) GetLevel() TLevelType {
	return p.Level
}

var TBigSetGenericData_Children_DEFAULT []*TMetaItem

func (p *TBigSetGenericData) GetChildren() []*TMetaItem {
	return p.Children
}

var TBigSetGenericData_Smallset_DEFAULT *TSmallSet

func (p *TBigSetGenericData) GetSmallset() *TSmallSet {
	if !p.IsSetSmallset() {
		return TBigSetGenericData_Smallset_DEFAULT
	}
	return p.Smallset
}

var TBigSetGenericData_Splitinfo_DEFAULT *TNeedSplitInfo

func (p *TBigSetGenericData) GetSplitinfo() *TNeedSplitInfo {
	if !p.IsSetSplitinfo() {
		return TBigSetGenericData_Splitinfo_DEFAULT
	}
	return p.Splitinfo
}
func (p *TBigSetGenericData) IsSetChildren() bool {
	return p.Children != nil
}

func (p *TBigSetGenericData) IsSetSmallset() bool {
	return p.Smallset != nil
}

func (p *TBigSetGenericData) IsSetSplitinfo() bool {
	return p.Splitinfo != nil
}

func (p *TBigSetGenericData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBigSetGenericData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.ParentID = temp
	}
	return nil
}

func (p *TBigSetGenericData) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TLevelType(v)
		p.Level = temp
	}
	return nil
}

func (p *TBigSetGenericData) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMetaItem, 0, size)
	p.Children = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &TMetaItem{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Children = append(p.Children, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TBigSetGenericData) readField4(iprot thrift.TProtocol) error {
	p.Smallset = &TSmallSet{}
	if err := p.Smallset.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Smallset), err)
	}
	return nil
}

func (p *TBigSetGenericData) readField5(iprot thrift.TProtocol) error {
	p.Splitinfo = &TNeedSplitInfo{}
	if err := p.Splitinfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Splitinfo), err)
	}
	return nil
}

func (p *TBigSetGenericData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TBigSetGenericData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBigSetGenericData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parentID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parentID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ParentID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parentID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parentID: ", p), err)
	}
	return err
}

func (p *TBigSetGenericData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err)
	}
	return err
}

func (p *TBigSetGenericData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetChildren() {
		if err := oprot.WriteFieldBegin("children", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:children: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Children)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Children {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:children: ", p), err)
		}
	}
	return err
}

func (p *TBigSetGenericData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSmallset() {
		if err := oprot.WriteFieldBegin("smallset", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:smallset: ", p), err)
		}
		if err := p.Smallset.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Smallset), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:smallset: ", p), err)
		}
	}
	return err
}

func (p *TBigSetGenericData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplitinfo() {
		if err := oprot.WriteFieldBegin("splitinfo", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:splitinfo: ", p), err)
		}
		if err := p.Splitinfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Splitinfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:splitinfo: ", p), err)
		}
	}
	return err
}

func (p *TBigSetGenericData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBigSetGenericData(%+v)", *p)
}

// Attributes:
//  - MinItem
//  - MetaID
//  - Level
type TSetMetaPathItem struct {
	MinItem TItemKey `thrift:"minItem,1" json:"minItem"`
	MetaID  int64    `thrift:"metaID,2" json:"metaID"`
	Level   int8     `thrift:"level,3" json:"level"`
}

func NewTSetMetaPathItem() *TSetMetaPathItem {
	return &TSetMetaPathItem{}
}

func (p *TSetMetaPathItem) GetMinItem() TItemKey {
	return p.MinItem
}

func (p *TSetMetaPathItem) GetMetaID() int64 {
	return p.MetaID
}

func (p *TSetMetaPathItem) GetLevel() int8 {
	return p.Level
}
func (p *TSetMetaPathItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSetMetaPathItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TItemKey(v)
		p.MinItem = temp
	}
	return nil
}

func (p *TSetMetaPathItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MetaID = v
	}
	return nil
}

func (p *TSetMetaPathItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Level = temp
	}
	return nil
}

func (p *TSetMetaPathItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSetMetaPathItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSetMetaPathItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minItem: ", p), err)
	}
	if err := oprot.WriteBinary(p.MinItem); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.minItem (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minItem: ", p), err)
	}
	return err
}

func (p *TSetMetaPathItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err)
	}
	return err
}

func (p *TSetMetaPathItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err)
	}
	return err
}

func (p *TSetMetaPathItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSetMetaPathItem(%+v)", *p)
}

// Attributes:
//  - MetaPath
//  - SmallSetInfo
//  - SplitInfo
type TSetMetaPath struct {
	MetaPath     []*TSetMetaPathItem `thrift:"metaPath,1" json:"metaPath"`
	SmallSetInfo *TSetMetaPathItem   `thrift:"smallSetInfo,2" json:"smallSetInfo,omitempty"`
	SplitInfo    *TNeedSplitInfo     `thrift:"splitInfo,3" json:"splitInfo,omitempty"`
}

func NewTSetMetaPath() *TSetMetaPath {
	return &TSetMetaPath{}
}

func (p *TSetMetaPath) GetMetaPath() []*TSetMetaPathItem {
	return p.MetaPath
}

var TSetMetaPath_SmallSetInfo_DEFAULT *TSetMetaPathItem

func (p *TSetMetaPath) GetSmallSetInfo() *TSetMetaPathItem {
	if !p.IsSetSmallSetInfo() {
		return TSetMetaPath_SmallSetInfo_DEFAULT
	}
	return p.SmallSetInfo
}

var TSetMetaPath_SplitInfo_DEFAULT *TNeedSplitInfo

func (p *TSetMetaPath) GetSplitInfo() *TNeedSplitInfo {
	if !p.IsSetSplitInfo() {
		return TSetMetaPath_SplitInfo_DEFAULT
	}
	return p.SplitInfo
}
func (p *TSetMetaPath) IsSetSmallSetInfo() bool {
	return p.SmallSetInfo != nil
}

func (p *TSetMetaPath) IsSetSplitInfo() bool {
	return p.SplitInfo != nil
}

func (p *TSetMetaPath) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSetMetaPath) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TSetMetaPathItem, 0, size)
	p.MetaPath = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TSetMetaPathItem{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.MetaPath = append(p.MetaPath, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TSetMetaPath) readField2(iprot thrift.TProtocol) error {
	p.SmallSetInfo = &TSetMetaPathItem{}
	if err := p.SmallSetInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmallSetInfo), err)
	}
	return nil
}

func (p *TSetMetaPath) readField3(iprot thrift.TProtocol) error {
	p.SplitInfo = &TNeedSplitInfo{}
	if err := p.SplitInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
	}
	return nil
}

func (p *TSetMetaPath) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSetMetaPath"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSetMetaPath) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metaPath", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaPath: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MetaPath)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MetaPath {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaPath: ", p), err)
	}
	return err
}

func (p *TSetMetaPath) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSmallSetInfo() {
		if err := oprot.WriteFieldBegin("smallSetInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:smallSetInfo: ", p), err)
		}
		if err := p.SmallSetInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmallSetInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:smallSetInfo: ", p), err)
		}
	}
	return err
}

func (p *TSetMetaPath) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplitInfo() {
		if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:splitInfo: ", p), err)
		}
		if err := p.SplitInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:splitInfo: ", p), err)
		}
	}
	return err
}

func (p *TSetMetaPath) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSetMetaPath(%+v)", *p)
}

// Attributes:
//  - SmallSetIDs
//  - FirstIdxFrom
type TGetSliceInfo struct {
	SmallSetIDs  []int64 `thrift:"smallSetIDs,1" json:"smallSetIDs"`
	FirstIdxFrom int32   `thrift:"firstIdxFrom,2" json:"firstIdxFrom"`
}

func NewTGetSliceInfo() *TGetSliceInfo {
	return &TGetSliceInfo{}
}

func (p *TGetSliceInfo) GetSmallSetIDs() []int64 {
	return p.SmallSetIDs
}

func (p *TGetSliceInfo) GetFirstIdxFrom() int32 {
	return p.FirstIdxFrom
}
func (p *TGetSliceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TGetSliceInfo) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.SmallSetIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.SmallSetIDs = append(p.SmallSetIDs, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TGetSliceInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FirstIdxFrom = v
	}
	return nil
}

func (p *TGetSliceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGetSliceInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TGetSliceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("smallSetIDs", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:smallSetIDs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.SmallSetIDs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SmallSetIDs {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:smallSetIDs: ", p), err)
	}
	return err
}

func (p *TGetSliceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("firstIdxFrom", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:firstIdxFrom: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FirstIdxFrom)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.firstIdxFrom (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:firstIdxFrom: ", p), err)
	}
	return err
}

func (p *TGetSliceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetSliceInfo(%+v)", *p)
}

// Attributes:
//  - Count
//  - MidItem
//  - CountFromMid
//  - Prev
//  - Nxt
type TSmallSetInfo struct {
	Count        int32          `thrift:"count,1" json:"count"`
	MidItem      TItemKey       `thrift:"midItem,2" json:"midItem"`
	CountFromMid int32          `thrift:"countFromMid,3" json:"countFromMid"`
	Prev         TSmallSetIDKey `thrift:"prev,4" json:"prev,omitempty"`
	Nxt          TSmallSetIDKey `thrift:"nxt,5" json:"nxt,omitempty"`
}

func NewTSmallSetInfo() *TSmallSetInfo {
	return &TSmallSetInfo{}
}

func (p *TSmallSetInfo) GetCount() int32 {
	return p.Count
}

func (p *TSmallSetInfo) GetMidItem() TItemKey {
	return p.MidItem
}

func (p *TSmallSetInfo) GetCountFromMid() int32 {
	return p.CountFromMid
}

var TSmallSetInfo_Prev_DEFAULT TSmallSetIDKey = 0

func (p *TSmallSetInfo) GetPrev() TSmallSetIDKey {
	return p.Prev
}

var TSmallSetInfo_Nxt_DEFAULT TSmallSetIDKey = 0

func (p *TSmallSetInfo) GetNxt() TSmallSetIDKey {
	return p.Nxt
}
func (p *TSmallSetInfo) IsSetPrev() bool {
	return p.Prev != TSmallSetInfo_Prev_DEFAULT
}

func (p *TSmallSetInfo) IsSetNxt() bool {
	return p.Nxt != TSmallSetInfo_Nxt_DEFAULT
}

func (p *TSmallSetInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSmallSetInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TSmallSetInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TItemKey(v)
		p.MidItem = temp
	}
	return nil
}

func (p *TSmallSetInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CountFromMid = v
	}
	return nil
}

func (p *TSmallSetInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TSmallSetIDKey(v)
		p.Prev = temp
	}
	return nil
}

func (p *TSmallSetInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TSmallSetIDKey(v)
		p.Nxt = temp
	}
	return nil
}

func (p *TSmallSetInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSmallSetInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSmallSetInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err)
	}
	return err
}

func (p *TSmallSetInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("midItem", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midItem: ", p), err)
	}
	if err := oprot.WriteBinary(p.MidItem); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.midItem (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midItem: ", p), err)
	}
	return err
}

func (p *TSmallSetInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("countFromMid", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:countFromMid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CountFromMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.countFromMid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:countFromMid: ", p), err)
	}
	return err
}

func (p *TSmallSetInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrev() {
		if err := oprot.WriteFieldBegin("prev", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:prev: ", p), err)
		}
		if err := oprot.WriteI64(int64(p.Prev)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.prev (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:prev: ", p), err)
		}
	}
	return err
}

func (p *TSmallSetInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNxt() {
		if err := oprot.WriteFieldBegin("nxt", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nxt: ", p), err)
		}
		if err := oprot.WriteI64(int64(p.Nxt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nxt (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nxt: ", p), err)
		}
	}
	return err
}

func (p *TSmallSetInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSmallSetInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Item
type TItemResult_ struct {
	Error TErrorCode `thrift:"error,1" json:"error"`
	Item  *TItem     `thrift:"item,2" json:"item,omitempty"`
}

func NewTItemResult_() *TItemResult_ {
	return &TItemResult_{}
}

func (p *TItemResult_) GetError() TErrorCode {
	return p.Error
}

var TItemResult__Item_DEFAULT *TItem

func (p *TItemResult_) GetItem() *TItem {
	if !p.IsSetItem() {
		return TItemResult__Item_DEFAULT
	}
	return p.Item
}
func (p *TItemResult_) IsSetItem() bool {
	return p.Item != nil
}

func (p *TItemResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TItemResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Error = temp
	}
	return nil
}

func (p *TItemResult_) readField2(iprot thrift.TProtocol) error {
	p.Item = &TItem{}
	if err := p.Item.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
	}
	return nil
}

func (p *TItemResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TItemResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetItem() {
		if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err)
		}
		if err := p.Item.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err)
		}
	}
	return err
}

func (p *TItemResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Items
type TItemSetResult_ struct {
	Error TErrorCode `thrift:"error,1" json:"error"`
	Items *TItemSet  `thrift:"items,2" json:"items,omitempty"`
}

func NewTItemSetResult_() *TItemSetResult_ {
	return &TItemSetResult_{}
}

func (p *TItemSetResult_) GetError() TErrorCode {
	return p.Error
}

var TItemSetResult__Items_DEFAULT *TItemSet

func (p *TItemSetResult_) GetItems() *TItemSet {
	if !p.IsSetItems() {
		return TItemSetResult__Items_DEFAULT
	}
	return p.Items
}
func (p *TItemSetResult_) IsSetItems() bool {
	return p.Items != nil
}

func (p *TItemSetResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TItemSetResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Error = temp
	}
	return nil
}

func (p *TItemSetResult_) readField2(iprot thrift.TProtocol) error {
	p.Items = &TItemSet{}
	if err := p.Items.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Items), err)
	}
	return nil
}

func (p *TItemSetResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TItemSetResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TItemSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TItemSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err := oprot.WriteFieldBegin("items", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:items: ", p), err)
		}
		if err := p.Items.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Items), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:items: ", p), err)
		}
	}
	return err
}

func (p *TItemSetResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TItemSetResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Ok
//  - OldItem
type TPutItemResult_ struct {
	Error   TErrorCode `thrift:"error,1" json:"error"`
	Ok      bool       `thrift:"ok,2" json:"ok"`
	OldItem *TItem     `thrift:"oldItem,3" json:"oldItem,omitempty"`
}

func NewTPutItemResult_() *TPutItemResult_ {
	return &TPutItemResult_{}
}

func (p *TPutItemResult_) GetError() TErrorCode {
	return p.Error
}

func (p *TPutItemResult_) GetOk() bool {
	return p.Ok
}

var TPutItemResult__OldItem_DEFAULT *TItem

func (p *TPutItemResult_) GetOldItem() *TItem {
	if !p.IsSetOldItem() {
		return TPutItemResult__OldItem_DEFAULT
	}
	return p.OldItem
}
func (p *TPutItemResult_) IsSetOldItem() bool {
	return p.OldItem != nil
}

func (p *TPutItemResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TPutItemResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Error = temp
	}
	return nil
}

func (p *TPutItemResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Ok = v
	}
	return nil
}

func (p *TPutItemResult_) readField3(iprot thrift.TProtocol) error {
	p.OldItem = &TItem{}
	if err := p.OldItem.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldItem), err)
	}
	return nil
}

func (p *TPutItemResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPutItemResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPutItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TPutItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ok", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ok: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Ok)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ok (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ok: ", p), err)
	}
	return err
}

func (p *TPutItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOldItem() {
		if err := oprot.WriteFieldBegin("oldItem", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oldItem: ", p), err)
		}
		if err := p.OldItem.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldItem), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oldItem: ", p), err)
		}
	}
	return err
}

func (p *TPutItemResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPutItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Existed
type TExistedResult_ struct {
	Error   TErrorCode `thrift:"error,1" json:"error"`
	Existed bool       `thrift:"existed,2" json:"existed"`
}

func NewTExistedResult_() *TExistedResult_ {
	return &TExistedResult_{}
}

func (p *TExistedResult_) GetError() TErrorCode {
	return p.Error
}

func (p *TExistedResult_) GetExisted() bool {
	return p.Existed
}
func (p *TExistedResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TExistedResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Error = temp
	}
	return nil
}

func (p *TExistedResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Existed = v
	}
	return nil
}

func (p *TExistedResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TExistedResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TExistedResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TExistedResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("existed", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:existed: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Existed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.existed (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:existed: ", p), err)
	}
	return err
}

func (p *TExistedResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExistedResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Added
//  - Replaced
type TMultiPutItemResult_ struct {
	Error    TErrorCode `thrift:"error,1" json:"error"`
	Added    [][]byte   `thrift:"added,2" json:"added,omitempty"`
	Replaced []*TItem   `thrift:"replaced,3" json:"replaced,omitempty"`
}

func NewTMultiPutItemResult_() *TMultiPutItemResult_ {
	return &TMultiPutItemResult_{}
}

func (p *TMultiPutItemResult_) GetError() TErrorCode {
	return p.Error
}

var TMultiPutItemResult__Added_DEFAULT [][]byte

func (p *TMultiPutItemResult_) GetAdded() [][]byte {
	return p.Added
}

var TMultiPutItemResult__Replaced_DEFAULT []*TItem

func (p *TMultiPutItemResult_) GetReplaced() []*TItem {
	return p.Replaced
}
func (p *TMultiPutItemResult_) IsSetAdded() bool {
	return p.Added != nil
}

func (p *TMultiPutItemResult_) IsSetReplaced() bool {
	return p.Replaced != nil
}

func (p *TMultiPutItemResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMultiPutItemResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Error = temp
	}
	return nil
}

func (p *TMultiPutItemResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Added = tSlice
	for i := 0; i < size; i++ {
		var _elem5 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.Added = append(p.Added, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMultiPutItemResult_) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TItem, 0, size)
	p.Replaced = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &TItem{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Replaced = append(p.Replaced, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMultiPutItemResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMultiPutItemResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMultiPutItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TMultiPutItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdded() {
		if err := oprot.WriteFieldBegin("added", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:added: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Added)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Added {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:added: ", p), err)
		}
	}
	return err
}

func (p *TMultiPutItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplaced() {
		if err := oprot.WriteFieldBegin("replaced", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replaced: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Replaced)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Replaced {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replaced: ", p), err)
		}
	}
	return err
}

func (p *TMultiPutItemResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMultiPutItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Splited
//  - NewRootID_
//  - MinItem
//  - Count
type TSplitBigSetResult_ struct {
	Error      TErrorCode    `thrift:"error,1" json:"error"`
	Splited    bool          `thrift:"splited,2" json:"splited"`
	NewRootID_ TContainerKey `thrift:"newRootID,3" json:"newRootID"`
	MinItem    TItemKey      `thrift:"minItem,4" json:"minItem"`
	Count      int64         `thrift:"count,5" json:"count"`
}

func NewTSplitBigSetResult_() *TSplitBigSetResult_ {
	return &TSplitBigSetResult_{}
}

func (p *TSplitBigSetResult_) GetError() TErrorCode {
	return p.Error
}

func (p *TSplitBigSetResult_) GetSplited() bool {
	return p.Splited
}

func (p *TSplitBigSetResult_) GetNewRootID_() TContainerKey {
	return p.NewRootID_
}

func (p *TSplitBigSetResult_) GetMinItem() TItemKey {
	return p.MinItem
}

func (p *TSplitBigSetResult_) GetCount() int64 {
	return p.Count
}
func (p *TSplitBigSetResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSplitBigSetResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Error = temp
	}
	return nil
}

func (p *TSplitBigSetResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Splited = v
	}
	return nil
}

func (p *TSplitBigSetResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TContainerKey(v)
		p.NewRootID_ = temp
	}
	return nil
}

func (p *TSplitBigSetResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TItemKey(v)
		p.MinItem = temp
	}
	return nil
}

func (p *TSplitBigSetResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TSplitBigSetResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSplitBigSetResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSplitBigSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TSplitBigSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("splited", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splited: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Splited)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.splited (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splited: ", p), err)
	}
	return err
}

func (p *TSplitBigSetResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newRootID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newRootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NewRootID_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newRootID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newRootID: ", p), err)
	}
	return err
}

func (p *TSplitBigSetResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:minItem: ", p), err)
	}
	if err := oprot.WriteBinary(p.MinItem); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.minItem (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:minItem: ", p), err)
	}
	return err
}

func (p *TSplitBigSetResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:count: ", p), err)
	}
	return err
}

func (p *TSplitBigSetResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSplitBigSetResult_(%+v)", *p)
}

// Attributes:
//  - BigsetName
//  - BigsetID
//  - Count
type TStringBigSetInfo struct {
	BigsetName TStringKey    `thrift:"bigsetName,1,required" json:"bigsetName"`
	BigsetID   TContainerKey `thrift:"bigsetID,2,required" json:"bigsetID"`
	Count      *int64        `thrift:"count,3" json:"count,omitempty"`
}

func NewTStringBigSetInfo() *TStringBigSetInfo {
	return &TStringBigSetInfo{}
}

func (p *TStringBigSetInfo) GetBigsetName() TStringKey {
	return p.BigsetName
}

func (p *TStringBigSetInfo) GetBigsetID() TContainerKey {
	return p.BigsetID
}

var TStringBigSetInfo_Count_DEFAULT int64

func (p *TStringBigSetInfo) GetCount() int64 {
	if !p.IsSetCount() {
		return TStringBigSetInfo_Count_DEFAULT
	}
	return *p.Count
}
func (p *TStringBigSetInfo) IsSetCount() bool {
	return p.Count != nil
}

func (p *TStringBigSetInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetBigsetName bool = false
	var issetBigsetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetBigsetName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetBigsetID = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetBigsetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BigsetName is not set"))
	}
	if !issetBigsetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BigsetID is not set"))
	}
	return nil
}

func (p *TStringBigSetInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TStringKey(v)
		p.BigsetName = temp
	}
	return nil
}

func (p *TStringBigSetInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TContainerKey(v)
		p.BigsetID = temp
	}
	return nil
}

func (p *TStringBigSetInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = &v
	}
	return nil
}

func (p *TStringBigSetInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TStringBigSetInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TStringBigSetInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetName: ", p), err)
	}
	if err := oprot.WriteString(string(p.BigsetName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetName: ", p), err)
	}
	return err
}

func (p *TStringBigSetInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigsetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bigsetID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigsetID: ", p), err)
	}
	return err
}

func (p *TStringBigSetInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err := oprot.WriteFieldBegin("count", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Count)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
		}
	}
	return err
}

func (p *TStringBigSetInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringBigSetInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Info
type TBigSetInfoResult_ struct {
	Error TErrorCode         `thrift:"error,1,required" json:"error"`
	Info  *TStringBigSetInfo `thrift:"info,2" json:"info,omitempty"`
}

func NewTBigSetInfoResult_() *TBigSetInfoResult_ {
	return &TBigSetInfoResult_{}
}

func (p *TBigSetInfoResult_) GetError() TErrorCode {
	return p.Error
}

var TBigSetInfoResult__Info_DEFAULT *TStringBigSetInfo

func (p *TBigSetInfoResult_) GetInfo() *TStringBigSetInfo {
	if !p.IsSetInfo() {
		return TBigSetInfoResult__Info_DEFAULT
	}
	return p.Info
}
func (p *TBigSetInfoResult_) IsSetInfo() bool {
	return p.Info != nil
}

func (p *TBigSetInfoResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetError bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetError = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetError {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"))
	}
	return nil
}

func (p *TBigSetInfoResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Error = temp
	}
	return nil
}

func (p *TBigSetInfoResult_) readField2(iprot thrift.TProtocol) error {
	p.Info = &TStringBigSetInfo{}
	if err := p.Info.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
	}
	return nil
}

func (p *TBigSetInfoResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TBigSetInfoResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBigSetInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TBigSetInfoResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInfo() {
		if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
		}
		if err := p.Info.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
		}
	}
	return err
}

func (p *TBigSetInfoResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBigSetInfoResult_(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SplitInfo
type SplitJob struct {
	RootID    TContainerKey   `thrift:"rootID,1,required" json:"rootID"`
	SplitInfo *TNeedSplitInfo `thrift:"splitInfo,2" json:"splitInfo,omitempty"`
}

func NewSplitJob() *SplitJob {
	return &SplitJob{}
}

func (p *SplitJob) GetRootID() TContainerKey {
	return p.RootID
}

var SplitJob_SplitInfo_DEFAULT *TNeedSplitInfo

func (p *SplitJob) GetSplitInfo() *TNeedSplitInfo {
	if !p.IsSetSplitInfo() {
		return SplitJob_SplitInfo_DEFAULT
	}
	return p.SplitInfo
}
func (p *SplitJob) IsSetSplitInfo() bool {
	return p.SplitInfo != nil
}

func (p *SplitJob) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRootID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetRootID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRootID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RootID is not set"))
	}
	return nil
}

func (p *SplitJob) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TContainerKey(v)
		p.RootID = temp
	}
	return nil
}

func (p *SplitJob) readField2(iprot thrift.TProtocol) error {
	p.SplitInfo = &TNeedSplitInfo{}
	if err := p.SplitInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
	}
	return nil
}

func (p *SplitJob) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SplitJob"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SplitJob) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RootID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err)
	}
	return err
}

func (p *SplitJob) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplitInfo() {
		if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitInfo: ", p), err)
		}
		if err := p.SplitInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitInfo: ", p), err)
		}
	}
	return err
}

func (p *SplitJob) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SplitJob(%+v)", *p)
}
